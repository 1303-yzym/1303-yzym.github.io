<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ShamirSecretShare</title>
    <link href="/2024/05/07/ShamirSecretShare/"/>
    <url>/2024/05/07/ShamirSecretShare/</url>
    
    <content type="html"><![CDATA[<h1 id="Shamir秘密共享算法"><a href="#Shamir秘密共享算法" class="headerlink" title="Shamir秘密共享算法"></a>Shamir秘密共享算法</h1><h2 id="算法背景"><a href="#算法背景" class="headerlink" title="算法背景"></a>算法背景</h2><p><img src="https://th.bing.com/th/id/OIP.1gUkjK1Wwm-hTlzubp9VagHaEK?rs=1&amp;pid=ImgDetMain" alt=""><br>Sharmir‘s Secret Share 算法是一种加密算法，在不受信任的网络中可以使用它来安全地分发私密信息。无密钥安全技术（生物识别数据、私钥等）使用 Sharmir‘s Secret Share 算法来确保个人数据的安全。Sharmir‘s Secret Share 算法是 1979 年著名密码学家阿迪·沙米尔（Adi Shamir）提出了一种新的 secret 共享方法。该算法基于Lagrange插值法及矢量计算。</p><h2 id="SSS算法的数学原理"><a href="#SSS算法的数学原理" class="headerlink" title="SSS算法的数学原理"></a>SSS算法的数学原理</h2><p>Shamir Secret Share算法是一种秘密分享方案，由Adi Shamir在1979年提出。该算法允许一个秘密被分割成多个部分，这些部分可以分发给多个参与者。只有当足够数量的部分被重新组合时，秘密才能被恢复。</p><p>假设我们有一个秘密S，我们想要将其分割成n个部分，并且我们希望至少有k个部分才能恢复秘密。我们可以通过以下步骤实现：</p><ol><li>选择一个k-1次的多项式f(x)，使得f(0) = S。这个多项式的系数是随机选择的，只有常数项是S。即，我们有：</li></ol><script type="math/tex; mode=display">f(x) = a_{k-1}x^{k-1} + a_{k-2}x^{k-2} + ... + a_1x + S</script><p>其中，$a_{k-1}, a_{k-2}, …, a_1$ 是随机选择的系数。</p><ol><li>为每个参与者i生成一个点(即share)$(i, f(i))$。这个点就是他们的秘密部分。</li></ol><p>要恢复秘密，我们需要至少k个点。我们可以使用Lagrange插值法来恢复f(x)，然后计算f(0)来得到秘密S。具体来说，我们有：</p><script type="math/tex; mode=display">f(x) = \sum_{i=0}^{k-1} y_i \cdot l_i(x)</script><p>其中，$l_i(x)$ 是 Lagrange 基函数，定义为：</p><script type="math/tex; mode=display">l_i(x) = \prod_{0 \leq m \leq k-1, m \neq i} \frac{x - x_m}{x_i - x_m}</script><p>这种方法的优点是，任何少于k个的点都无法提供关于秘密的任何信息。这是因为k-1次的多项式有无穷多个，而且除了f(x)外，所有的多项式在x=0处的值都与S不同。</p><font color = red>但使用常规多项式存在安全漏洞</font><p>如果攻击者拥有一些点，但不足以满足阈值，则可以使用代数来减少可能的多项式的数量。这使得执行暴力攻击以解密secret 变得更加容易。<br>于是我们引入模运算，将普通多项式取模一个大素数转换为循环多项式。   </p><script type="math/tex; mode=display">f(x) = (a_{k-1}x^{k-1} + a_{k-2}x^{k-2} + ... + a_1x + S) \mod P</script><p>应用模数会使函数循环，因为它只能达到模数的数量，然后它会再次回到零。<br>在多普通多项式应用模数的时候有一个需要注意的点：需要确保模数是一个比 Secret、多项式系数以及打算生成的份额数量更大的质数。选择的质数越大，找到 secret 的概率就越低。<br>当已知点数量达到阈值的时候，仍然可以通过插值找到 secret，但是现在由于应用模数丢失共享数据的部分信息从而低于共享数据数量的阈值并不能提供更多关于 secret 的信息，所以普通多项式存在的安全漏洞也就迎刃而解。</p><h3 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h3><script type="math/tex; mode=display">(a+b) \mod c = (a \mod c) + (b \mod c)</script><script type="math/tex; mode=display">(a-b) \mod c = (a \mod c) - (b \mod c)</script><script type="math/tex; mode=display">(a*b) \mod c = (a \mod c) * (b \mod c)</script><script type="math/tex; mode=display">a^b \mod c = ((a \mod c)^b)\mod c</script><h3 id="Lagrange插值法"><a href="#Lagrange插值法" class="headerlink" title="Lagrange插值法"></a>Lagrange插值法</h3><p>Lagrange插值法是一种通过已知的点集合来找到一个多项式函数，使得这个函数在这些已知点的值与实际值相等的方法。假设我们有n个点，我们可以找到一个n-1次的多项式来适应这些点。</p><p>假设我们有n个点 $(x_0, y_0), (x_1, y_1), …, (x_{n-1}, y_{n-1})$，Lagrange插值多项式可以表示为：</p><script type="math/tex; mode=display">L(x) = \sum_{i=0}^{n-1} y_i \cdot l_i(x)</script><p>其中，$l_i(x)$ 是 Lagrange 基函数，定义为：</p><script type="math/tex; mode=display">l_i(x) = \prod_{0 \leq m \leq n, m \neq i} \frac{x - x_m}{x_i - x_m}</script><p>每个 $l_i(x)$ 在 $x = x_i$ 时等于1，在 $x = x_j$ (j ≠ i) 时等于0。这就确保了在每个已知点 $x_i$ 上，$L(x_i) = y_i$。</p><p>简而言之，假定我们已知一个一元n次的多项式$f(x)$，我们只需要n+1个点，就可以通过Lagrange插值法快速的计算出$f(x)$的值。<br>而在此算法中，我们只需要计算出$f(0)$的值再取模即可计算出加密数据。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> myShamirDemo<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;math/big&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> prime = <span class="hljs-number">257</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Encrypt</span><span class="hljs-params">(secret []<span class="hljs-type">byte</span>, n, num <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">byte</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(secret) == <span class="hljs-number">0</span> || n &lt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;illegal input data&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> num &lt; n &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;num has to be greater than n&quot;</span>)<br>&#125;<br>result := initArray(num, <span class="hljs-built_in">len</span>(secret))<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(secret); j++ &#123;<br>f := getPolynomial(n, secret[j])<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; num; i++ &#123;<br><span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span> &#123;<br>result[i][<span class="hljs-number">0</span>] = <span class="hljs-type">byte</span>(i + <span class="hljs-number">1</span>)<br>&#125;<br>result[i][j+<span class="hljs-number">1</span>] = f(<span class="hljs-type">uint8</span>(i + <span class="hljs-number">1</span>))<br>&#125;<br>&#125;<br>temp := Decrypt(result, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(secret); i++ &#123;<br><span class="hljs-keyword">if</span> temp[i] != secret[i] &#123;<br><span class="hljs-keyword">return</span> Encrypt(secret, n, num)<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Decrypt</span><span class="hljs-params">(shares [][]<span class="hljs-type">byte</span>, n <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(shares) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;illegal input data&quot;</span>)<br>&#125;<br>x := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int64</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>x[i] = <span class="hljs-type">int64</span>(i + <span class="hljs-number">1</span>)<br>&#125;<br>yss := initInt64Array(<span class="hljs-built_in">len</span>(shares[<span class="hljs-number">0</span>])<span class="hljs-number">-1</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(shares[i]); j++ &#123;<br>yss[j<span class="hljs-number">-1</span>][i] = <span class="hljs-type">int64</span>(shares[i][j])<br>&#125;<br>&#125;<br><br>result := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, ys := <span class="hljs-keyword">range</span> yss &#123;<br>secret := Lagrange(<span class="hljs-number">0</span>, x, ys)<br>temp, _ := <span class="hljs-built_in">new</span>(big.Float).SetString(secret.FloatString(<span class="hljs-number">0</span>))<br>secretBigInt := <span class="hljs-built_in">new</span>(big.Int)<br>temp.Int(secretBigInt)<br>secretBigInt.Mod(secretBigInt, big.NewInt(<span class="hljs-type">int64</span>(prime)))<br>tempSecret := <span class="hljs-type">int</span>(secretBigInt.Int64())<br><span class="hljs-keyword">if</span> tempSecret &lt; <span class="hljs-number">0</span> &#123;<br>tempSecret += prime<br>&#125;<br>result = <span class="hljs-built_in">append</span>(result, <span class="hljs-type">byte</span>(tempSecret))<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initArray</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">byte</span> &#123;<br>result := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">byte</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; a; i++ &#123;<br>nums := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, b+<span class="hljs-number">1</span>)<br>result = <span class="hljs-built_in">append</span>(result, nums)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPolynomial</span><span class="hljs-params">(n <span class="hljs-type">int</span>, secretMsg <span class="hljs-type">byte</span>)</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">uint8</span>)</span></span> <span class="hljs-type">uint8</span> &#123;<br>coefficients := <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint8</span>, n<span class="hljs-number">-1</span>) <br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++ &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>temp := <span class="hljs-type">uint8</span>(rand.Intn(math.MaxInt8))<br><span class="hljs-keyword">if</span> temp != <span class="hljs-number">0</span> &#123;<br>coefficients[i] = temp<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">uint8</span>)</span></span> <span class="hljs-type">uint8</span> &#123;<br><span class="hljs-keyword">var</span> count = <span class="hljs-built_in">new</span>(big.Int).Set(big.NewInt(<span class="hljs-number">0</span>))<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(coefficients); i++ &#123;<br>bigCoefficient := <span class="hljs-built_in">new</span>(big.Int).Set(big.NewInt(<span class="hljs-type">int64</span>(coefficients[i])))<br>exponent := <span class="hljs-built_in">new</span>(big.Int).Set(big.NewInt(<span class="hljs-type">int64</span>(n - <span class="hljs-number">1</span> - i)))<br>bigX := <span class="hljs-built_in">new</span>(big.Int).Set(big.NewInt(<span class="hljs-type">int64</span>(x)))<br>bigPrime := <span class="hljs-built_in">new</span>(big.Int).Set(big.NewInt(<span class="hljs-type">int64</span>(prime)))<br>bigX.Exp(bigX, exponent, bigPrime)<br>bigX.Mul(bigX, bigCoefficient)<br>bigX.Mod(bigX, bigPrime)<br>count.Add(count, bigX)<br>count.Mod(count, bigPrime)<br>&#125;<br>count.Add(count, big.NewInt(<span class="hljs-type">int64</span>(secretMsg)))<br>count.Mod(count, big.NewInt(<span class="hljs-type">int64</span>(prime)))<br><span class="hljs-keyword">return</span> <span class="hljs-type">uint8</span>(count.Int64())<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRandIndex</span><span class="hljs-params">(num <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>numArr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++ &#123;<br>numArr = <span class="hljs-built_in">append</span>(numArr, i+<span class="hljs-number">1</span>)<br>&#125;<br>r := rand.New(rand.NewSource(time.Now().UnixNano()))<br>r.Shuffle(<span class="hljs-built_in">len</span>(numArr), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> &#123;<br>numArr[i], numArr[j] = numArr[j], numArr[i]<br>&#125;)<br><span class="hljs-keyword">return</span> numArr[:num]<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Lagrange</span><span class="hljs-params">(x <span class="hljs-type">int64</span>, xs, ys []<span class="hljs-type">int64</span>)</span></span> *big.Rat &#123;<br>l := big.NewRat(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(xs); i++ &#123;<br>term := big.NewRat(ys[i], <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span>(xs); j++ &#123;<br><span class="hljs-keyword">if</span> i != j &#123;<br>num := big.NewRat(x-xs[j], <span class="hljs-number">1</span>)<br>den := big.NewRat(xs[i]-xs[j], <span class="hljs-number">1</span>)<br>frac := <span class="hljs-built_in">new</span>(big.Rat).Quo(num, den)<br>term.Mul(term, frac)<br>&#125;<br>&#125;<br>l.Add(l, term)<br>&#125;<br><span class="hljs-keyword">return</span> l<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initInt64Array</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int64</span> &#123;<br>result := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int64</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; a; i++ &#123;<br>nums := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int64</span>, b)<br>result = <span class="hljs-built_in">append</span>(result, nums)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>白马篇</title>
    <link href="/2024/02/01/%E7%99%BD%E9%A9%AC%E7%AF%87/"/>
    <url>/2024/02/01/%E7%99%BD%E9%A9%AC%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="白马篇"><a href="#白马篇" class="headerlink" title="白马篇"></a>白马篇</h1><h2 id="曹植·魏晋"><a href="#曹植·魏晋" class="headerlink" title="曹植·魏晋"></a>曹植·魏晋</h2><p>白马饰金羁，连翩西北驰。<br>借问谁家子，幽并游侠儿。<br>少小去乡邑，杨声沙漠垂。<br>宿昔秉良弓，楛矢何参差！<br>控弦破左的，右发摧月支。<br>仰手接飞猱，俯身散马蹄。<br>狡捷过猴猿，勇剽若豹螭。<br>边城多警急，虏骑数迁移。<br>羽檄从北来，厉马登高堤。<br>长驱蹈匈奴，左顾陵鲜卑。<br>弃身锋刃端，性命安可怀？<br>父母且不顾，何言子与妻？<br>名编壮士籍，不得中顾私。<br>捐躯赴国难，视死忽如归。   </p><p><img src="https://img.zuowenxue.com/zuozhe/lianghan/caozhi.jpg" alt="曹植像" title="曹植像"><br><a href="https://baike.baidu.com/item/%E7%99%BD%E9%A9%AC%E7%AF%87/22087" title="白马篇·曹植">白马篇·曹植</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统名词理解记录</title>
    <link href="/2024/01/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%8D%E8%AF%8D%E7%90%86%E8%A7%A3/"/>
    <url>/2024/01/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%8D%E8%AF%8D%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统名词理解记录"><a href="#操作系统名词理解记录" class="headerlink" title="操作系统名词理解记录"></a>操作系统名词理解记录</h1><h2 id="重入码"><a href="#重入码" class="headerlink" title="重入码"></a>重入码</h2><p>&emsp;&emsp;可重入代码 (Reentry code)也叫 纯代码 (Pure code)是一种允许多个进程同时访问的代码。 为了使各进程所执行的代码完全相同，故不允许任何进程对其进行修改。 程序 在运行过程中可以被打断，并由开始处再次执行，并且在合理的范围内（多次重入，而不造成 堆栈溢出 等其他问题），程序可以在被打断处继续执行，且执行结果不受影响。</p><p>&emsp;&emsp;可重入编码的编写需要遵循以下原则： 1. 避免使用全局变量和静态变量，这些变量会在多个任务之间共享，容易出现冲突。 2. 使用局部变量和动态内存分配，避免多个任务之间共享同一块内存。 3. 避免使用不可重入的函数，如strtok ()、strerror ()等，这些函数使用了全局变量或静态变量，会导致多个任务之间的冲突。</p><h2 id="上下文切换（context-switch）"><a href="#上下文切换（context-switch）" class="headerlink" title="上下文切换（context switch）"></a>上下文切换（context switch）</h2><p>&emsp;&emsp;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>猫猫交换机</title>
    <link href="/2024/01/13/%E7%8C%AB%E7%8C%AB%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <url>/2024/01/13/%E7%8C%AB%E7%8C%AB%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="猫猫如此可爱，一定能温暖整个世界吧！！！！"><a href="#猫猫如此可爱，一定能温暖整个世界吧！！！！" class="headerlink" title="猫猫如此可爱，一定能温暖整个世界吧！！！！"></a>猫猫如此可爱，一定能温暖整个世界吧！！！！</h1><p>昨晚我们交换到可爱猫猫图片，并将他们收集在这里，希望可爱猫猫能够带给大家一整天的温暖与幸福！！！！<br><img src="https://7up.pics/images/2024/01/13/1705072807828.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807830.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807833.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807835.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807838.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807841.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807844.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807847.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807849.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807851.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807853.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807856.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807858.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807861.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807863.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807866.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807869.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807871.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807874.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807877.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807880.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807882.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807886.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807889.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807893.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807901.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807904.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807914.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807918.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807921.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807925.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807928.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807931.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807933.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807936.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807938.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807941.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072808005.webp" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072808009.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072808013.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807818.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807810.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807823.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807813.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/1705072807816.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/2E0ABF88FC603D01CE3DADAB793EDAAA.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/FC3A1DB784122221E53D75249025DA32.jpeg" alt=""><br><img src="https://7up.pics/images/2024/01/13/513AF5A8820B3B0237154DF75AD88A12.jpeg" alt=""></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单DApp开发——NFTMarket合约开发</title>
    <link href="/2024/01/04/%E7%AE%80%E5%8D%95DApp%E5%BC%80%E5%8F%91/"/>
    <url>/2024/01/04/%E7%AE%80%E5%8D%95DApp%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="简单DApp开发——NFTMarket合约开发"><a href="#简单DApp开发——NFTMarket合约开发" class="headerlink" title="简单DApp开发——NFTMarket合约开发"></a>简单DApp开发——NFTMarket合约开发</h1><p><img src="https://www.freecodecamp.org/news/content/images/size/w2000/2020/05/clifford-photography-hiFghSs4keM-unsplash.jpg" alt=""></p><h2 id="什么是DApp？"><a href="#什么是DApp？" class="headerlink" title="什么是DApp？"></a>什么是DApp？</h2><p>&emsp;&emsp;DApp是一种利用智能合约处理数据，利用区块链网络存储数据的去中心化应用。与传统中心化应用需要用户将数据传输到中心化的服务器再进行处理和存储不同，DApp使用户与智能合约进行交互，并自动的生成不可篡改、价值唯一、公开透明、可溯源的账本数据，并存储在区块链网络中，这使数据的安全性得到保障。<br>&emsp;&emsp;同时DApp因为其匿名性，无需用户提供其自身信息，这对用户信息起到保护作用。<br>&emsp;&emsp;当今社会，应用提供服务时，往往要求我们提供许多完全多余的身份信息。例如，当我们来到一家饭店，想要使用某微信小程序自助点餐，我们往往需要关注其公众号，提供本人使用的手机号验证，才能得以点餐。这一系列过程繁琐而没有实质性的必要，并且有极大的泄露个人信息的危险（不排除是恶意服务商的有意为之）。这模糊了人的身份。在合理的逻辑下，当我进入饭店，坐下并意图点餐的时候，我便应该获取了顾客的身份；而在当前的逻辑下，我需要通过我的一系列真实的身份信息去申请一个顾客的身份，用永久使用的（或者说是长期使用的）身份信息去换取一个短暂使用的身份，这是完全是本末倒置的。</p><h2 id="什么是ERC"><a href="#什么是ERC" class="headerlink" title="什么是ERC"></a>什么是ERC</h2><p>&emsp;&emsp;ERC是Ethereum Request for Comments（以太坊征求意见提案）的缩写，代表以太坊已正式化的提案，它是由EIP(Ethereum Improvement Proposals以太坊升级提案)经过以太坊开发团队各种审议和测试后通过的一种提案,即对有用提案进行标准化，从而实现对开发者提供模版帮助以及标准限制。而其后的20\721\1155则代表提案号，ERC-20则代表第20号提案，其它提案号亦然。</p><h2 id="ERC20——以太坊标准代币发行协议"><a href="#ERC20——以太坊标准代币发行协议" class="headerlink" title="ERC20——以太坊标准代币发行协议"></a>ERC20——以太坊标准代币发行协议</h2><p><img src="https://5b0988e595225.cdn.sohucs.com/images/20180925/84eb099b05dc427c9131e55c0029d83a.jpeg" alt=""></p><h3 id="什么是代币？"><a href="#什么是代币？" class="headerlink" title="什么是代币？"></a>什么是代币？</h3><p>在以太坊中，代币可以表示几乎一切可以通过数值衡量的东西：</p><ul><li>游戏角色的数值</li><li>账户资产</li><li>金融债券</li><li>某种货币</li><li>……</li></ul><p><img src="https://image.9game.cn/2017/1/26/15807401.jpg" alt=""></p><p>&emsp;&emsp;这些东西往往都代表着价值，而不同系统、不同的事物之间往往需要有价值的流动（例如，用蓝绿修改器去提升游戏角色属性数值），这就需要一个统一的价值界定标准。ERC-20提出了一种同质化货币（Fungible token）的标准，使得每种代币在类型与价值上与其他任何代币都完全相同。<br>ERC-20（以太坊意见征求 20）由 Fabian Vogelsteller 提出于 2015 年 11 月。这是一个能实现智能合约中代币的应用程序接口标准。</p><h3 id="ERC-20-的功能示例包括："><a href="#ERC-20-的功能示例包括：" class="headerlink" title="ERC-20 的功能示例包括："></a>ERC-20 的功能示例包括：</h3><ul><li>将代币从一个帐户转到另一个帐户</li><li>获取帐户的当前代币余额</li><li>获取网络上可用代币的总供应量</li><li>批准一个帐户中一定的代币金额由第三方帐户使用    </li></ul><p>&emsp;&emsp;如果智能合约实施了下列方法和事件，它可以被称为 ERC-20 代币合约，一旦部署，将负责跟踪以太坊上创建的代币。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-type">name</span>() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (string)<br>//代币名称<br><span class="hljs-keyword">function</span> symbol() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (string)<br>/代币标识<br><span class="hljs-keyword">function</span> decimals() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint8)<br><br><span class="hljs-keyword">function</span> totalSupply() <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint256)<br><span class="hljs-keyword">function</span> balanceOf(address _owner) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint256 balance)<br><span class="hljs-keyword">function</span> transfer(address _to, uint256 _value) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (<span class="hljs-type">bool</span> success)<br><span class="hljs-keyword">function</span> transferFrom(address _from, address _to, uint256 _value) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (<span class="hljs-type">bool</span> success)<br><span class="hljs-keyword">function</span> approve(address _spender, uint256 _value) <span class="hljs-built_in">public</span> <span class="hljs-keyword">returns</span> (<span class="hljs-type">bool</span> success)<br><span class="hljs-keyword">function</span> allowance(address _owner, address _spender) <span class="hljs-built_in">public</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint256 remaining)<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;ERC20已经是一个相对成熟的标准，在开发的过程中，我们往往不再需要自己去实现（但在学习的过程中去亲手实现是非常重要的）。   </p><h3 id="OpenZeppelin框架"><a href="#OpenZeppelin框架" class="headerlink" title="OpenZeppelin框架"></a>OpenZeppelin框架</h3><p>&emsp;&emsp;OpenZeppelin是一个开源的框架，提供可复用的智能合约模板来开发分布式的应用、协议和DAO（去中心化的自治组织），通过标准的、经过完整测试和整个社区检视的代码，减少产生漏洞的风险。</p><p><img src="https://7up.pics/images/2024/01/04/imagecc41f87315a7a61a.png" alt=""></p><p><a href="https://www.openzeppelin.com/contracts" title="openzeppelin官网">OpenZeppelin官方网站</a>  </p><p>我们也将通过openzeppelin框架去实现我们的ERC20与ERC721合约</p><h2 id="ERC721——非同质化货币标准"><a href="#ERC721——非同质化货币标准" class="headerlink" title="ERC721——非同质化货币标准"></a>ERC721——非同质化货币标准</h2><p><img src="https://www.528btc.com/d/file/2019-04-25/5ac820d70191b27a68d1945b4b3c36af.png" alt=""></p><hr><p><img src="https://7up.pics/images/2024/01/04/image.png" alt=""></p><p>&emsp;&emsp;CryptoKitties是首款利用区块链开发的游戏，玩家们可以购买一只以太猫来进行喂养、繁殖与交易。与ERC20标准下的同质化代币不同，以太猫是一种不可再分的代币（我们可以把ERC20标准下的代币，类比的看作我们现实中使用的货币，一张十块钱可以兑换为两张五块使用，而以太猫就像是一只现实中的小猫，我们无法将再分了（不会有人想吃猫肉吧，太过分了！！！））。</p><p><img src="https://7up.pics/images/2024/01/04/f85e2976ec2de16169e081fdfa464060.png" alt="CryptoKitties">  </p><p><a href="https://www.cryptokitties.co/">CryptoKitties官网</a><br>&emsp;&emsp;CryptoKitties的成功，验证了不可细分的资产是如何产生的，以及如何再以太坊上交易。<br>&emsp;&emsp;由此诞生出了ERC721标准。 ERC721提出了如何开发非同质化货币（Non-Fungible Token,NFT）合约的标准。由于NFT不可分、唯一性的特性，使其与现实中的物品有共通的特点（你不可能找到两片完全相同的树叶；当我们讨论树叶时，树叶是一个不可再分的整体），区块链获得了全新的应用价值。某种程度上，我们可以将现实生活中的任何物品映射到区块链上。目前NFT的概念被数字藏品和电子游戏广泛应用。</p><h3 id="ERC721接口实现"><a href="#ERC721接口实现" class="headerlink" title="ERC721接口实现"></a>ERC721接口实现</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// SPDX-License-Identifier: Apache-2.0</span><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-selector-class">.7</span>;<br>interface IERC721 <span class="hljs-comment">/* is ERC165 */</span> &#123;<br> <br>    event <span class="hljs-built_in">Transfer</span>(address indexed _from, address indexed _to, uint256 indexed _tokenId);<br>    <span class="hljs-comment">//转移事件：token发生转移时进行event通知；</span><br><br>    event <span class="hljs-built_in">Approval</span>(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);<br>    <span class="hljs-comment">//授权事件：发生授权事件时进行通知；</span><br><br>    event <span class="hljs-built_in">ApprovalForAll</span>(address indexed _owner, address indexed _operator, bool _approved);<br>    <span class="hljs-comment">//全部授权事件，发生全部授权时进行通知；</span><br><br>    function <span class="hljs-built_in">balanceOf</span>(address _owner) external view returns (uint256);<br>    <span class="hljs-comment">//账户余额：返回账户中有多少个token</span><br><br>    function <span class="hljs-built_in">ownerOf</span>(uint256 _tokenId) external view returns (address);<br>    <span class="hljs-comment">//拥有权查询：按照tokenID查询其归属账户</span><br><br>    function <span class="hljs-built_in">safeTransferFrom</span>(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;<br>    <span class="hljs-comment">//tokenID转移，提供两个同名函数，避免出现合约的非标准实现而导致存入的token无法转移</span><br><br>    function <span class="hljs-built_in">safeTransferFrom</span>(address _from, address _to, uint256 _tokenId) external payable;<br>    <span class="hljs-comment">//tokenID安全转移：转移三要素要存在；</span><br><br>    function <span class="hljs-built_in">transferFrom</span>(address _from, address _to, uint256 _tokenId) external payable;<br>    <span class="hljs-comment">//tokenID转移</span><br><br>    function <span class="hljs-built_in">approve</span>(address _approved, uint256 _tokenId) external payable;<br>    <span class="hljs-comment">//授权：指定token授权；</span><br><br>    function <span class="hljs-built_in">setApprovalForAll</span>(address _operator, bool _approved) external;<br>    <span class="hljs-comment">//全部授权，指将用户名下的所有tokenID进行转移；</span><br><br>    function <span class="hljs-built_in">getApproved</span>(uint256 _tokenId) external view returns (address);<br>    <span class="hljs-comment">//授权查询：查询tokenID对应的被授权者；</span><br><br>    function <span class="hljs-built_in">isApprovedForAll</span>(address _owner, address _operator) external view returns (bool);<br>    <span class="hljs-comment">//查看全部授权：查看owner是否对operator赋予了全部授权；</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;有趣的事: 一只以太猫的最高出售价格竟然能达到惊人的340万美元！！！人对于价值的衡量真是魔幻，如此昂贵的电子宠物你想要拥有吗？由于游戏基于以太坊区块链网络，游戏的每一步动作都需要消耗gas，请不要再说什么网游都太氪金了，区块链游戏才是真正的呼吸都需要付费。<br>&emsp;&emsp;与人相关的问题总是如此复杂，甚至充满矛盾。存在矛盾依然能够相对正常（其实什么是正常也很难去定义吧，可我找不到一个贴切的用语去形容了）的行事（机器遇上矛盾必然就宕掉了），这大概就是人与机器最本质的差别吧。所以我认为在人能够使机器认识矛盾之前（首先人类应当能够理解矛盾，可矛盾如何解释呢？我也无法想象，我们或许只能寄希望于世界出现超人），真正的人工智能大概永远也不会出现吧。（血肉苦弱，机械飞升，让人与机械互补？哈哈，太科幻了）<br><img src="https://img1.baidu.com/it/u=2042134634,1832896754&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=960&amp;h=442" alt=""></p><h2 id="NFTMarket合约开发"><a href="#NFTMarket合约开发" class="headerlink" title="NFTMarket合约开发"></a>NFTMarket合约开发</h2><p><img src="https://t8.baidu.com/it/u=3832674000,3094826545&amp;fm=193" alt=""></p><p>开发工具：Remix IDE</p><p>ERC20代码实现：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br><span class="hljs-keyword">pragma</span> solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.20</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span>;<br><br>contract cUSDT <span class="hljs-keyword">is</span> ERC20 &#123;<br>    constructor() ERC20(<span class="hljs-string">&quot;my USDT&quot;</span>, <span class="hljs-string">&quot;myUSDT&quot;</span>) &#123;<br>        _mint(msg.sender, <span class="hljs-number">1</span> * <span class="hljs-number">10</span> ** <span class="hljs-number">8</span> * <span class="hljs-number">10</span> ** decimals());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>ERC721代码实现：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br><span class="hljs-keyword">pragma</span> solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.20</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/access/Ownable.sol&quot;</span>;<br><br>contract MyNFT <span class="hljs-keyword">is</span> ERC721, ERC721Enumerable, ERC721URIStorage, Ownable &#123;<br>    uint256 <span class="hljs-keyword">private</span> _nextTokenId;<br><br>    constructor() ERC721(<span class="hljs-string">&quot;MyNFT&quot;</span>, <span class="hljs-string">&quot;myNFT&quot;</span>) Ownable(msg.sender) &#123;&#125;<br><br>    <span class="hljs-built_in">function</span> safeMint(address to, <span class="hljs-built_in">string</span> memory uri) <span class="hljs-keyword">public</span> onlyOwner &#123;<br>        uint256 tokenId = _nextTokenId++;<br>        _safeMint(to, tokenId);<br>        _setTokenURI(tokenId, uri);<br>    &#125;<br><br>    <span class="hljs-comment">// The following functions are overrides required by Solidity.</span><br><br>    <span class="hljs-built_in">function</span> _update(<br>        address to,<br>        uint256 tokenId,<br>        address auth<br>    ) internal <span class="hljs-keyword">override</span>(ERC721, ERC721Enumerable) returns (address) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>._update(to, tokenId, auth);<br>    &#125;<br><br>    <span class="hljs-built_in">function</span> _increaseBalance(<br>        address account,<br>        uint128 value<br>    ) internal <span class="hljs-keyword">override</span>(ERC721, ERC721Enumerable) &#123;<br>        <span class="hljs-keyword">super</span>._increaseBalance(account, value);<br>    &#125;<br><br>    <span class="hljs-built_in">function</span> tokenURI(<br>        uint256 tokenId<br>    ) <span class="hljs-keyword">public</span> view <span class="hljs-keyword">override</span>(ERC721, ERC721URIStorage) returns (<span class="hljs-built_in">string</span> memory) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.tokenURI(tokenId);<br>    &#125;<br><br>    <span class="hljs-built_in">function</span> supportsInterface(<br>        bytes4 interfaceId<br>    )<br>        <span class="hljs-keyword">public</span><br>        view<br>        <span class="hljs-keyword">override</span>(ERC721, ERC721Enumerable, ERC721URIStorage)<br>        returns (<span class="hljs-built_in">bool</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.supportsInterface(interfaceId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>购买NFT</li><li>出售NFT</li><li>查询在售的NFT（查询所有在售的NFT，查询我正在出售的NFT）</li><li>更改在售的NFT状态（更改价格或下架）</li></ul><p>功能流程：</p><ul><li>购买NFT：<br>查询指定NFT是否存在 -&gt; 购买者将NFT出售价格的代币转移给出售地址 -&gt; NFTMarket合约将NFT转给购买者地址</li><li>出售NFT：<br>售卖者调用safeTransferFrom()将NFT转给NFTMarket，并在data字段中指定价格，NFTMarket合约将自动上架NFT</li><li>查询在售的NFT：<br>1）查询所有在售的NFT<br>直接返回在售NFT列表<br>2）查询调用者账户出售的NFT<br>遍历NFT列表，将属于调用者账户出售的NFT组成列表并返回</li><li>更改在售NFT状态：<br>1）更改价格<br>修改指定nft价格<br>2）将指定nft转回给卖家，并将其从在售列表中移除</li></ul><p>NFTMarket代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.20</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/interfaces/IERC721Receiver.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/interfaces/IERC721.sol&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;@openzeppelin/contracts/interfaces/IERC20.sol&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@title</span> NFTMarket contract that allows atomic swaps of ERC20 and ERC721</span><br><span class="hljs-comment"> */</span><br>contract Market is IERC721Receiver &#123;<br>    <span class="hljs-comment">//erc20与erc721的实体</span><br>    IERC20 <span class="hljs-keyword">public</span> erc20;<br>    IERC721 <span class="hljs-keyword">public</span> erc721;<br><br>    bytes4 internal <span class="hljs-type">constant</span> <span class="hljs-variable">MAGIC_ON_ERC721_RECEIVED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x150b7a02</span>;<br>    <span class="hljs-comment">//订单结构定义</span><br>    struct Order &#123;<br>        address seller;<br>        uint256 tokenId;<br>        uint256 price;<br>    &#125;<br>    <span class="hljs-comment">//tokenID对订单的映射</span><br>    mapping(uint256 =&gt; Order) <span class="hljs-keyword">public</span> orderOfId; <br>    <span class="hljs-comment">//订单数组，用于给用户遍历访问在售的token</span><br>    Order[] <span class="hljs-keyword">public</span> orders;<br>    <span class="hljs-comment">//tokenID对token的订单指针的映射</span><br>    mapping(uint256 =&gt; uint256) <span class="hljs-keyword">public</span> idToOrderIndex;<br><br>    <span class="hljs-comment">//交易事件，完成交易时触发</span><br>    event <span class="hljs-title function_">Deal</span><span class="hljs-params">(address buyer, address seller, uint256 tokenId, uint256 price)</span>;<br>    <span class="hljs-comment">//新建订单事件</span><br>    event <span class="hljs-title function_">NewOrder</span><span class="hljs-params">(address seller, uint256 tokenId, uint256 price)</span>;<br>    <span class="hljs-comment">//取消订单事件</span><br>    event <span class="hljs-title function_">CancelOrder</span><span class="hljs-params">(address seller, uint256 tokenId)</span>;<br>    更改订单事件<br>    event <span class="hljs-title function_">ChangePrice</span><span class="hljs-params">(</span><br><span class="hljs-params">        address seller,</span><br><span class="hljs-params">        uint256 tokenId,</span><br><span class="hljs-params">        uint256 previousPrice,</span><br><span class="hljs-params">        uint256 price</span><br><span class="hljs-params">    )</span>;<br><br>    constructor(IERC20 _erc20, IERC721 _erc721) &#123;<br>        require(<br>            address(_erc20) != address(<span class="hljs-number">0</span>),<br>            <span class="hljs-string">&quot;Market: IERC20 contract address must be non-null&quot;</span><br>        );<br>        require(<br>            address(_erc721) != address(<span class="hljs-number">0</span>),<br>            <span class="hljs-string">&quot;Market: IERC721 contract address must be non-null&quot;</span><br>        );<br>        <span class="hljs-comment">//此处直接将传入的地址封装为实体，方便后面的使用</span><br>        erc20 = _erc20;<br>        erc721 = _erc721;<br>    &#125;<br><br>    function <span class="hljs-title function_">buy</span><span class="hljs-params">(uint256 _tokenId)</span> external &#123;<br>        <span class="hljs-comment">//查询指定token是否存在，否则回滚状态</span><br>        require(isListed(_tokenId), <span class="hljs-string">&quot;Market: Token ID is not listed&quot;</span>);<br><br>        <span class="hljs-type">address</span> <span class="hljs-variable">seller</span> <span class="hljs-operator">=</span> orderOfId[_tokenId].seller;<br>        <span class="hljs-type">address</span> <span class="hljs-variable">buyer</span> <span class="hljs-operator">=</span> msg.sender;<br>        <span class="hljs-type">uint256</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> orderOfId[_tokenId].price;<br>        <span class="hljs-comment">//必须在支付成功之后才能更改状态，否则可能遭到重入攻击</span><br>        require(<br>            erc20.transferFrom(buyer, seller, price),<br>            <span class="hljs-string">&quot;Market: ERC20 transfer not successful&quot;</span><br>        );<br>        <span class="hljs-comment">//支付成功后，合约将NFT转给买家</span><br>        erc721.safeTransferFrom(address(<span class="hljs-built_in">this</span>), buyer, _tokenId);<br>        <span class="hljs-comment">//移除订单</span><br>        removeListing(_tokenId);<br>        <br>        emit <span class="hljs-title function_">Deal</span><span class="hljs-params">(buyer, seller, _tokenId, price)</span>;<br>    &#125;<br><br>    function <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(uint256 _tokenId)</span> external &#123;<br>        require(isListed(_tokenId), <span class="hljs-string">&quot;Market: Token ID is not listed&quot;</span>);<br><br>        <span class="hljs-type">address</span> <span class="hljs-variable">seller</span> <span class="hljs-operator">=</span> orderOfId[_tokenId].seller;<br>        <span class="hljs-comment">//只能由卖家操作</span><br>        require(seller == msg.sender, <span class="hljs-string">&quot;Market: Sender is not seller&quot;</span>);<br>        <span class="hljs-comment">//合约将NFT转给卖家</span><br>        erc721.safeTransferFrom(address(<span class="hljs-built_in">this</span>), seller, _tokenId);<br>        removeListing(_tokenId);<br><br>        emit <span class="hljs-title function_">CancelOrder</span><span class="hljs-params">(seller, _tokenId)</span>;<br>    &#125;<br><br>    function <span class="hljs-title function_">changePrice</span><span class="hljs-params">(uint256 _tokenId, uint256 _price)</span> external &#123;<br>        require(isListed(_tokenId), <span class="hljs-string">&quot;Market: Token ID is not listed&quot;</span>);<br>        <span class="hljs-type">address</span> <span class="hljs-variable">seller</span> <span class="hljs-operator">=</span> orderOfId[_tokenId].seller;<br>        <span class="hljs-comment">//只能由卖家操作</span><br>        require(seller == msg.sender, <span class="hljs-string">&quot;Market: Sender is not seller&quot;</span>);<br><br>        <span class="hljs-type">uint256</span> <span class="hljs-variable">previousPrice</span> <span class="hljs-operator">=</span> orderOfId[_tokenId].price;<br>        orderOfId[_tokenId].price = _price;<br>        Order <span class="hljs-type">storage</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orders[idToOrderIndex[_tokenId]];<br>        order.price = _price;<br><br>        emit <span class="hljs-title function_">ChangePrice</span><span class="hljs-params">(seller, _tokenId, previousPrice, _price)</span>;<br>    &#125;<br>    <span class="hljs-comment">//获取所有NFT信息</span><br>    function <span class="hljs-title function_">getAllNFTs</span><span class="hljs-params">()</span> <span class="hljs-keyword">public</span> view <span class="hljs-title function_">returns</span> <span class="hljs-params">(Order[] memory)</span> &#123;<br>        <span class="hljs-keyword">return</span> orders;<br>    &#125;<br>    <span class="hljs-comment">//获取所有调用账户下的NFT信息</span><br>    function <span class="hljs-title function_">getMyNFTs</span><span class="hljs-params">()</span> <span class="hljs-keyword">public</span> view <span class="hljs-title function_">returns</span> <span class="hljs-params">(Order[] memory)</span> &#123;<br>        Order[] <span class="hljs-type">memory</span> <span class="hljs-variable">myOrders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>[](orders.length);<br>        <span class="hljs-type">uint256</span> <span class="hljs-variable">myOrdersCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint256</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; orders.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (orders[i].seller == msg.sender) &#123;<br>                myOrders[myOrdersCount] = orders[i];<br>                myOrdersCount++;<br>            &#125;<br>        &#125;<br><br>        Order[] <span class="hljs-type">memory</span> <span class="hljs-variable">myOrdersTrimmed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>[](myOrdersCount);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint256</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; myOrdersCount; i++) &#123;<br>            myOrdersTrimmed[i] = myOrders[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> myOrdersTrimmed;<br>    &#125;<br>    <br>    function <span class="hljs-title function_">isListed</span><span class="hljs-params">(uint256 _tokenId)</span> <span class="hljs-keyword">public</span> view <span class="hljs-title function_">returns</span> <span class="hljs-params">(bool)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderOfId[_tokenId].seller != address(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    function <span class="hljs-title function_">getOrderLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">public</span> view <span class="hljs-title function_">returns</span> <span class="hljs-params">(uint256)</span> &#123;<br>        <span class="hljs-keyword">return</span> orders.length;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@dev</span> List a good using a ERC721 receiver hook</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> _operator the caller of this function</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> _seller the good seller</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> _tokenId the good id to list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> _data contains the pricing data as the first 32 bytes</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-comment">//此方法是本合约中最重要，也最难以理解的。只要用户调用safeTransferFrom将token转移给NFTMarket，此方法将接收数据，并自动上架</span><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在ERC721中，当外部账户调用4个参数的safeTransferFrom时，</span><br><span class="hljs-comment">     会自动检测_to的地址是否是一个合约地址（code size &gt; 0），</span><br><span class="hljs-comment">     若是合约地址，则会自动的调用合约地址的onERC721Received方法，并要求返回值为常量MAGIC_ON_ERC721_RECEIVED（若不是，则会抛出错误，并回滚状态）.</span><br><span class="hljs-comment">     在此次实现中，data代表价格，需要用bytes4编码的方式表示。合约拿到data后需要将其解析为uint256的形式</span><br><span class="hljs-comment">     */</span><br>    function <span class="hljs-title function_">onERC721Received</span><span class="hljs-params">(</span><br><span class="hljs-params">        address _operator,</span><br><span class="hljs-params">        address _seller,</span><br><span class="hljs-params">        uint256 _tokenId,</span><br><span class="hljs-params">        bytes calldata _data</span><br><span class="hljs-params">    )</span> <span class="hljs-keyword">public</span> override <span class="hljs-title function_">returns</span> <span class="hljs-params">(bytes4)</span> &#123;<br>        require(_operator == _seller, <span class="hljs-string">&quot;Market: Seller must be operator&quot;</span>);<br>        <span class="hljs-type">uint256</span> <span class="hljs-variable">_price</span> <span class="hljs-operator">=</span> toUint256(_data, <span class="hljs-number">0</span>);<span class="hljs-comment">//将价格解析为uint256的形式</span><br>        placeOrder(_seller, _tokenId, _price);<br><br>        <span class="hljs-keyword">return</span> MAGIC_ON_ERC721_RECEIVED;<span class="hljs-comment">//此常量其实就是bytes4(keccak256(&quot;onERC721Received(address _operator,address _seller,uint256 _tokenId,bytes calldata _data)&quot;))</span><br>    &#125;<br><br>    <span class="hljs-comment">// https://stackoverflow.com/questions/63252057/how-to-use-bytestouint-function-in-solidity-the-one-with-assembly</span><br>    function <span class="hljs-title function_">toUint256</span><span class="hljs-params">(</span><br><span class="hljs-params">        bytes memory _bytes,</span><br><span class="hljs-params">        uint256 _start</span><br><span class="hljs-params">    )</span> <span class="hljs-keyword">public</span> pure <span class="hljs-title function_">returns</span> <span class="hljs-params">(uint256)</span> &#123;<br>        require(_start + <span class="hljs-number">32</span> &gt;= _start, <span class="hljs-string">&quot;Market: toUint256_overflow&quot;</span>);<br>        require(_bytes.length &gt;= _start + <span class="hljs-number">32</span>, <span class="hljs-string">&quot;Market: toUint256_outOfBounds&quot;</span>);<br>        uint256 tempUint;<br><br>        assembly &#123;<br>            tempUint := mload(add(add(_bytes, <span class="hljs-number">0x20</span>), _start))<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> tempUint;<br>    &#125;<br><br>    function <span class="hljs-title function_">placeOrder</span><span class="hljs-params">(//此方法用于新增订单</span><br><span class="hljs-params">        address _seller,</span><br><span class="hljs-params">        uint256 _tokenId,</span><br><span class="hljs-params">        uint256 _price</span><br><span class="hljs-params">    )</span> internal &#123;<br>        require(_price &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Market: Price must be greater than zero&quot;</span>);<br><br>        orderOfId[_tokenId].seller = _seller;<br>        orderOfId[_tokenId].price = _price;<br>        orderOfId[_tokenId].tokenId = _tokenId;<br><br>        orders.push(orderOfId[_tokenId]);<br>        idToOrderIndex[_tokenId] = orders.length - <span class="hljs-number">1</span>;<br><br>        emit <span class="hljs-title function_">NewOrder</span><span class="hljs-params">(_seller, _tokenId, _price)</span>;<br>    &#125;<br><br>    function <span class="hljs-title function_">removeListing</span><span class="hljs-params">(uint256 _tokenId)</span> internal &#123;<span class="hljs-comment">//移除订单</span><br>        delete orderOfId[_tokenId];<br><br>        <span class="hljs-type">uint256</span> <span class="hljs-variable">orderToRemoveIndex</span> <span class="hljs-operator">=</span> idToOrderIndex[_tokenId];<br>        <span class="hljs-type">uint256</span> <span class="hljs-variable">lastOrderIndex</span> <span class="hljs-operator">=</span> orders.length - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> (lastOrderIndex != orderToRemoveIndex) &#123;<br>            Order <span class="hljs-type">memory</span> <span class="hljs-variable">lastOrder</span> <span class="hljs-operator">=</span> orders[lastOrderIndex];<br>            orders[orderToRemoveIndex] = lastOrder;<br>            idToOrderIndex[lastOrder.tokenId] = orderToRemoveIndex;<br>        &#125;<br><br>        orders.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="重入攻击"><a href="#重入攻击" class="headerlink" title="重入攻击"></a>重入攻击</h2><p>重入攻击是一种常见的智能合约漏洞，本质是合约内部调用的函数未能恰当地处理合约状态的更改。攻击者利用这个漏洞，将攻击代码插入到合约执行流程中，使得攻击者可以在合约还未完成之前再次调用某个函数(如: fallback, receive)，从而让攻击者在合约中获得额外的资产或信息。</p><h3 id="被重入攻击的重大事件"><a href="#被重入攻击的重大事件" class="headerlink" title="被重入攻击的重大事件"></a>被重入攻击的重大事件</h3><ul><li>2016年，The DAO合约被重入攻击，被盗取3,600,000枚ETH。为了追回损失（尽管这违背了区块链精神，代码及法律），以太坊发起了一次版本更新，将区块链状态回退。有相当多的人拒绝此次更新，这导致了以太坊进行硬分叉，分叉成以太坊和以太坊经典（ETC带走了约30%的算力）。</li><li>2019年，合成资产平台 Synthetix 遭受重入攻击，被盗 3,700,000 枚 sETH。</li><li>2020年，借贷平台 <a href="http://Lendf.me">http://Lendf.me</a> 遭受重入攻击，被盗 $25,000,000。</li><li>2021年，借贷平台 CREAM FINANCE 遭受重入攻击，被盗 $18,800,000。</li><li>2022年，算法稳定币项目 Fei 遭受重入攻击，被盗 $80,000,000。</li></ul><h3 id="对重入攻击的预防手段"><a href="#对重入攻击的预防手段" class="headerlink" title="对重入攻击的预防手段"></a>对重入攻击的预防手段</h3><p><img src="https://p1.itc.cn/images01/20210526/7e5183521d53476f8f104e95347c20d6.jpeg" alt=""></p><p>目前主要通过两种方式修复和预防重入攻击，检查-生效-交互模式和重入锁</p><ul><li><p>检查-生效-交互（checks-effect-interaction）：<br>检查-生效-交互模式是指，在改变状态之前必须先判断条件是否满足。</p></li><li><p>重入锁<br>在solidity合约开发中，重入锁是一种防止重入函数的修饰器（modifier）。它通过一个默认为0 的状态变量_status 来控制被修饰函数是否应该被顺利执行。被重入锁修饰的函数，在第一次调用时会检查_status是否为0，紧接着将_status的值设置为1，调用结束后再将_status改为0。这样，当攻击合约在调用结束前第二次的调用就会报错，重入攻击就失败了。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>比特币区块链系统</title>
    <link href="/2023/12/29/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E9%93%BE%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/12/29/%E6%AF%94%E7%89%B9%E5%B8%81%E5%8C%BA%E5%9D%97%E9%93%BE%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="比特币区块链系统"><a href="#比特币区块链系统" class="headerlink" title="比特币区块链系统"></a>比特币区块链系统</h1><h2 id="比特币区块链系统架构"><a href="#比特币区块链系统架构" class="headerlink" title="比特币区块链系统架构"></a>比特币区块链系统架构</h2><h3 id="比特币节点分类"><a href="#比特币节点分类" class="headerlink" title="比特币节点分类"></a>比特币节点分类</h3><p>比特币系统的节点总体上可以分为“全节点”、“轻节点”等两大类，其中发挥核心作用的是全节点。</p><h4 id="全节点是比特币系统中功能最完整的节点，全节点一般要求保持一直在线，主要负责执行以下功能："><a href="#全节点是比特币系统中功能最完整的节点，全节点一般要求保持一直在线，主要负责执行以下功能：" class="headerlink" title="全节点是比特币系统中功能最完整的节点，全节点一般要求保持一直在线，主要负责执行以下功能："></a>全节点是比特币系统中功能最完整的节点，全节点一般要求保持一直在线，主要负责执行以下功能：</h4><ul><li><font color=red>参与区块记账权的竞争</font>，通过PoW共识机制竞争下一个新区块的出块权，获得出块权的节点将获得系统激励，激励的方式就是奖励一定数量的比特币，也是比特币这种加密货币的唯一产生来源。</li><li><font color=red>存储完整的区块链与账本数据</font>，每个全节点都保存了一个相同区块链与账本数据副本，自2009年比特币系统上线运行至今，每个全节点的区块链与账本数据存储容量已超过500GB。</li><li><font color=red>提供P2P网络路由与同步服务</font>，监听系统网络上的交易、区块及事件信息，对接收到的交易和区块数据进行验证，并通过Gossip协议进行数据分发与同步。<h4 id="轻节点主要负责提供交易和钱包功能不参与出块权的竞争计算，不会存储完整的区块链，只需要保存每个区块的区块头信息，以及与节点自身相关的交易信息，可以发起简单支付验证请求SPV（Simplified-Payment-Verification），向全节点请求数据来验证交易，也提供P2P网络的路由功能。"><a href="#轻节点主要负责提供交易和钱包功能不参与出块权的竞争计算，不会存储完整的区块链，只需要保存每个区块的区块头信息，以及与节点自身相关的交易信息，可以发起简单支付验证请求SPV（Simplified-Payment-Verification），向全节点请求数据来验证交易，也提供P2P网络的路由功能。" class="headerlink" title="轻节点主要负责提供交易和钱包功能不参与出块权的竞争计算，不会存储完整的区块链，只需要保存每个区块的区块头信息，以及与节点自身相关的交易信息，可以发起简单支付验证请求SPV（Simplified Payment Verification），向全节点请求数据来验证交易，也提供P2P网络的路由功能。"></a><font color=red>轻节点主要负责提供交易和钱包功能不参与出块权的竞争计算，不会存储完整的区块链，只需要保存每个区块的区块头信息</font>，以及与节点自身相关的交易信息，可以发起简单支付验证请求SPV（Simplified Payment Verification），向全节点请求数据来验证交易，也提供P2P网络的路由功能。</h4></li></ul><h3 id="比特币区块链系统逻辑架构"><a href="#比特币区块链系统逻辑架构" class="headerlink" title="比特币区块链系统逻辑架构"></a>比特币区块链系统逻辑架构</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://7up.pics/images/2023/12/29/1b41a831edf201be6.png" alt="比特币逻辑架构" title="比特币逻辑架构"></h2><p><img src="https://p.sda1.dev/14/482d1bdee4a4150d1a7149c1a4082ff6/image.png" alt="区块链系统的逻辑架构" title="区块链系统的逻辑架构"></p><h2 id="比特币系统数据层"><a href="#比特币系统数据层" class="headerlink" title="比特币系统数据层"></a>比特币系统数据层</h2><h3 id="区块与区块链"><a href="#区块与区块链" class="headerlink" title="区块与区块链"></a>区块与区块链</h3><p>&emsp;&emsp;在比特币系统中，区块（Block）是区块链系统中最基本的数据单元，用于表示和记录区块链系统一段时间内发生的交易和状态结果的数据结构，是区块链系统各节点竞争完成一次共识计算的结果，多个区块采用链式结构（子区块区块头中存储着父区块区块头的哈希）链接在一起就构成了区块链（Blockchain）。每个区块又由区块头（Block Head）和区块体（Block Body）两部分组成。<br><img src="https://7up.pics/images/2023/12/29/2.png" alt=""><br>&ensp;&ensp;在区块链系统的所有区块中，第一个区块被称为“创世区块”（2009年1月3日，中本聪生成了创世区块，1月9日出现了序号为1的区块与创世区块相连，这标志着区块链的诞生）。每个区块中存储了一定数量的交易数据，都由交易发起人的数字签名来保证其真实性和合法性，<font color=red>从第二个区块开始，每个区块都保存了前一个区块（父区块）的区块头的哈希值</font>，区块之间首尾相互连接就构成链式结构，因而先前区块里的任何数据都不可被篡改。<br>&ensp;&ensp;比特币系统每个区块的大小不超过1MB，区块整体数据结构如下表所示。<br>|字段|大小|描述|<br>|:—-:|:—-:|:—-:|<br>|区块大小|4字节|记录区块的大小，单位是字节|<br>|区块头|80字节|区块头信息|<br>|交易技术|1-9字节|区块中包括的交易的数量（因为区块的大小限制在1M，所以交易的数量远远无法超过这个值，一般包含2000到3000笔交易）|<br>|交易列表|可变大小|区块中包含的交易数据（交易的数量与交易的数据大小都是不确定的）|</p><p>每个区块的区块头的数据结构如下：   </p><p><font color=red>区块头的大小为80字节</font><br>|字段|大小|描述|<br>|:—-:|:—-:|:—-:|<br>|当前区块的哈希（hash）|32字节|当前区块的区块头的哈希值|<br>|区块链网络确认数（confirmations）|4字节|当前区块确认数|<br>|区块高度（height）|4字节|从创世区块到当前区块的长度|<br>|版本（version）|4字节|区块的版本，用于版本升级检查|<br>|前一个区块的哈希（previousblockhash）|32字节|前一个区块的区块头哈希|<br>|Merkel树根哈希（merkleroot）|32字节|对区块中包含的所有交易创建的一棵Merkle树，该Merkle树的根哈希值|<br>|区块的时间戳（time）|4字节|区块创建的时间|<br>|区块的难渡目标（bits/target）|4字节|竞争计算该区块的PoW工作量证明难度目标|<br>|随机数（nonce）|4字节|32位的任意随机数，竞争计算该区块的PoW工作量证明问题求解|<br>|区块链上的总计工作量（chainwork）|4字节|区块链上所有的区块的计算工作量|</p><p>我们可以发现以上的区块头的数据结构中包含的字段长度和是大于80字节的。实际上在区块中区块头实际包含的字段为：</p><ul><li>版本（version） 4字节</li><li>父区块哈希（previous block hash）32字节</li><li>Merkle树根哈希（merkle root）32字节</li><li>时间戳（time stamp）4字节</li><li>难度目标（bits）4字节<br>-随机数（nonce）4字节</li></ul><h3 id="账本数据"><a href="#账本数据" class="headerlink" title="账本数据"></a>账本数据</h3><p>&ensp;&ensp;在一个传统的具有支付功能的系统中，每个用户都有一个资金账户，<font color=red>支付系统会对每个账户的余额进行单独地记录和管理</font>。当系统中有用户之间发生了支付的交易，系统会分别对参与交易的账户的余额信息进行检查和修改。<br>&ensp;&ensp;例如，甲向乙转账50元，<font color=red>首先需要检查甲的账户中有50元的余额</font>(这个先后顺序是重要的)，再从甲的账户中扣除50元，并向乙的账户中添加50元。可以看到，为了保证整个系统的正确性，系统需要确保对应的支付前提条件，如甲的账户中至少有50元的余额，同时也需要保证整个支付交易过程的<font color=red>原子性、一致性、隔离性及持久性（Atomicity、Consistency、Isolation、Durability，ACID）</font>，即保证从甲账户扣减金额和向乙账户增加相同数量的金额这两个操作必须同时执行和完成，一旦受其他事件影响中断，甲和乙的账户必须恢复到交易前的状态（状态回滚）。</p><h4 id="账户地址"><a href="#账户地址" class="headerlink" title="账户地址"></a>账户地址</h4><p>&ensp;&ensp;在比特币系统中没有直接的“账户”概念，而是用“账户地址”来代表用户的账户，相当于银行卡卡号，任何人都可以通过你的账户地址给你转账比特币。<br>&ensp;&ensp;比特币的账户地址就是用户的公钥经过哈希计算及Base58编码运算后生成的160位（20字节）的字符串，账户地址计算生成流程。<br><img src="https://7up.pics/images/2023/12/29/3.png" alt="比特币系统账户地址生成流程"></p><h4 id="账本数据模型UTXO"><a href="#账本数据模型UTXO" class="headerlink" title="账本数据模型UTXO"></a>账本数据模型UTXO</h4><p>&ensp;&ensp;比特币系统账本没有采用传统的“账户/余额”模型（比特币区块链不会直接跟踪每个地址的比特币余额），而是提出了一种独特的<font color=red>UTXO（Unspent Transaction Output）未消费的交易输出模型</font>，简称比特币UTXO模型。UTXO是一个包含交易数据和对应的执行代码的数据结构，所有的UTXO条目构成了比特币系统的“账本”。</p><p>&ensp;&ensp;UTXO模型的本质是通过交易记录来构成系统账本，而不是通过账户信息构成账本。在比特币的每一笔支付交易中，都有“交易输入 input”（标识资金来源）和“交易输出 output”（标识资金去向），且<font color=red>每个交易都可以有多个交易输入和多个交易输出</font>，交易之间按照时间戳的先后顺序排列，且任何一个交易中的交易输入都是其前序的某个交易中产生的“交易输出”，而所有交易的最初的交易输入都来自比特币系统节点生成区块得到的激励（比特币）（即Coinbase交易（创币交易））。</p><p>&ensp;&ensp;比特币系统中的每个“账户”可以视为对应着某个地址，比特币区块链不会直接跟踪每个地址的比特币余额，而是在区块链中存储交易数据的整个历史，比特币系统通过“交易池”跟踪区块链网络中所有UTXO的集合，而某个地址在某个时间点所具有的“余额”，是通过检查、求和与该地址相关的所有UTXO来计算。当使用UTXO时，它将从交易池中被删除，这将实时在计算余额时反映出来。<br><img src="https://7up.pics/images/2023/12/29/4.png" alt=""></p><h4 id="交易数据结构"><a href="#交易数据结构" class="headerlink" title="交易数据结构"></a>交易数据结构</h4><p>&ensp;&ensp;在比特币的每一笔交易数据中，都包含一个或多个“交易输入”（标识资金来源）、一个或多个“交易输出”（标识资金去向）、交易时间戳等信息。<br>比特币系统交易数据结构定义：<br>|字段|大小|描述|<br>|:—-:|:—-:|:—-|<br>|版本|4字节|当前交易的版本，用于版本升级检查，除非有重大升级的情况下，版本号基本无变化，是一个比较固定的值|<br>|交易哈希|32字节|当前交易的哈希值，唯一标识和索引该交易|<br>|交易输入|可变大小|交易的输入可能是一个或多个|<br>|交易输出|可变大小|交易的输出可能是一个或多个|<br>|锁定时间(多义字段)|4字节|当前交易被加到区块的最早时间，如果值为0，表示需要立即被加入到区块中；如果值大于0而小于5亿，表示区块高度；如果大于5亿就表示一个Unix时间戳|</p><p>交易输入的数据结构定义：<br>|字段|大小|描述|<br>|:—-:|:—-:|:—-|<br>|前置交易哈希|32字节|当前交易要使用的比特币金额来自之前交易的唯一标识|<br>|前置交易的输出序号|4字节|当前交易使用的比特币金额来自之前交易的输出序号|<br>|解锁脚本|可变大小|解锁脚本用于求解或满足要使用的比特币金额对应的锁定脚本|</p><p>交易输出的数据结构定义：<br>|字段|大小|描述|<br>|:—-:|:—-:|:—-|<br>|输出金额|8字节|当前交易输出的比特币金额，单位是聪（SAT），1比特币（BTC）= 1亿聪|<br>|锁定脚本|可变大小|锁定脚本会附上一个加密难题，规定将来要在使用这笔比特币金额时需要满足的条件|</p><p><img src="https://7up.pics/images/2023/12/29/5.png" alt="交易示例"></p><p>OP_DUP:复制栈顶元素，并将副本放置于栈顶<br>OP_CHECKSIG:OP_CHECKSIG 是用于验证 tx 输入签名是否有效的脚本操作码。OP_CHECKSIG 希望堆栈上有两个值。按照堆栈深度的顺序，这两个值分别是公钥和脚本签名。这两个值通常是通过运行我们试图验证的事务输入的 scriptSig 脚本获得的。scriptSig 脚本运行后会被删除，但堆栈保持不变。然后，运行现在正在使用的上一个事务输出中的 scriptPubKey 脚本，通常以 OP_CHECKSIG 结束。   </p><p><font color=red>TODO: 为什么OP_CHECKSIG不需要被签名数据就可以验证（为了避免文章过于冗长，单开一篇，记得在这里放上链接）</font><br><a href="https://en.bitcoin.it/wiki/OP_CHECKSIG">OP_CHECKSIG</a></p><p>脚本的使用就是将解锁脚本与锁定脚本拼接，执行脚本。<br>例如：<br>解锁脚本：张三的<Signature> 张三的<Public Key> | 锁定脚本：OP_DUP OP_HASH160 张三的<Public Key Hash> OP_EQUAL OP_CHECKSIG</p><p>执行过程：<br>张三的\<Signature\>入栈  —&gt;</p><p>  张三的\<Public Key\>入栈  —&gt;  </p><p>  OP_DUP，复制张三的\<Public Key\>并将副本放置于栈顶  —&gt;  </p><p>  OP_HASH160，对位于栈顶的张三的\<Public Key\>进行哈希，并将加过放置于栈顶(张三的\<Public Key Hash\>)  —&gt;  </p><p>  张三的\<Public Key Hash\>入栈  —&gt;  </p><p>  OP_EQUAL， 取出栈顶的两个元素进行比较，若相同，则移除元素，继续执行；若栈顶两元素不同，则中断执行，返回失败。  —&gt;  OP_CHECKSIG，检查签名，根据结果返回成功或失败（此时栈内元素尚有张三的\<Signature\>与张三的\<Public Key\>）</p><h3 id="状态数据"><a href="#状态数据" class="headerlink" title="状态数据"></a>状态数据</h3><p>&emsp;&emsp;在比特币系统中，交易表示一次价值转移操作，会导致账本状态的一次改变，如增加了一条交易记录；区块表示记录一段时间内发生的交易和状态结果，是对当前账本状态的一次共识和确认；链是由一个个区块按照发生时间顺序串联而成，可以看作是整个区块链状态变化的日志记录。<br><img src="https://7up.pics/images/2024/01/09/7.png" alt=""></p><h3 id="默克尔树"><a href="#默克尔树" class="headerlink" title="默克尔树"></a>默克尔树</h3><p>TODO: 默克尔树单开一篇</p><h2 id="比特币网络层"><a href="#比特币网络层" class="headerlink" title="比特币网络层"></a>比特币网络层</h2><p>比特币网络采用非结构化P2P网络，不存在中心服务器。在区块链网络存在“全节点”和“轻节点”等，发挥不同作用的节点：</p><ul><li>全节点是比特币网络中功能最完整的节点。全节点需要始终在线，参与出块竞争计算，存储整个区块链的完整信息，监听网络中传播的交易信息，收集并验证交易的是否合法，并且提供P2P网络的路由功能。</li><li>轻节点不需要参加出块竞争计算，只存储区块链的区块头信息，以及与自身有关的交易信息，可以发起简单支付验证请求（Simplified Payment Verification，SPV），向全节点请求数据来验证交易，并提供P2P路由功能。轻节点主要提供交易功能，但往往也提供钱包功能。   </li></ul><p>比特币系统的P2P网络基于TCP构建，默认RPC通信服务端口是8332，默认数据同步端口是8333，比特币系统的P2P网络主要采用了Gossip协议来实现节点发现、节点连接、区块广播、交易广播等功能。</p><h3 id="非结构化P2P网络"><a href="#非结构化P2P网络" class="headerlink" title="非结构化P2P网络"></a>非结构化P2P网络</h3><p>TODO: 新开一篇什么是结构化P2P与非结构化P2P，记得放链接</p><h3 id="节点发现管理"><a href="#节点发现管理" class="headerlink" title="节点发现管理"></a>节点发现管理</h3><p>&emsp;&emsp;当一个新的比特币网络节点启动后，为了能加入比特币网络，它必须至少发现一个网络中的活动节点并与之建立连接。在比特币网络中，一个新启动的节点可以通过两种方式发现其它网络节点：</p><ul><li>(1) 利用DNS种子节点<br>&emsp;&emsp;比特币系统的客户端会维护一个列表，列表中记录了长期稳定运行的节点（这些节点一般由区块链社区维护），这些节点也被称之为DNS(中心化域名查询服务)种子（DNS-seed）。新节点可以连接到种子节点，快速发现网络中的其它节点。DNS种子节点一般由比特币社区成员维护，种子节点通过自动扫描网络获取活跃节点的IP地址，如果某节点运行在默认的8332端口，将被添加到种子节中。<br>&emsp;&emsp;<font color=red>注意</font>：DNS种子节点查询结果是未被认证的，而且恶意节点操作者或网络中间人攻击者可以只返回被攻击者控制的节点的IP地址，在攻击者自己的网络中隔离程序，并且允许攻击者壮大它的交易和区块。</li><li>(2)  节点引荐<br>&emsp;&emsp;新启动节点可以不使用种子节点，而是指定一个节点的IP地址，新节点将与指定的节点建立连接，并将指定的节点作为DNS种子节点，在引荐信息形成之后断开与该节点的连接，并与新发现的节点连接。</li></ul><p>在比特币系统中，节点通过发送version消息连接其它节点，该消息一般包含以下信息：</p><ul><li>PROTOCOL_VERSION：当前节点的比特币P2P协议的版本号</li><li>nLocalServices：节点支持的本地服务列表</li><li>nTime：当前时间戳</li><li>addrYou：当前节点可见的远程节点的IP地址</li><li>addrMe：当前节点的本地IP地址</li><li>subver：当前节点运行的软件的子版本号</li><li>baseHeight：当前节点上的区块链的高度<br><img src="https://7up.pics/images/2024/01/09/8.png" alt=""></li></ul><p>如果接收到version消息的节点愿意与当前节点建立对等连接，则会发回一个verack消息，并发送version消息，等待两次握手成功之后，则两节点间建立起对等连接。</p><p>&emsp;&emsp;节点之间一旦连接，新节点将会发送一条包含自己IP地址的addr消息给对等节点，对等节点收到以后又会向与它连接的相邻节点发送addr消息，这样新节点的IP地址就会在P2P网络进行广播。此外，新节点还可以发送getaddr消息，要求对等节点把已知的节点的IP地址发送过来。通过这种方式，新节点可以找到需要连接的其它对等节点。</p><p><img src="https://7up.pics/images/2024/01/09/9.png" alt=""></p><p>&emsp;&emsp;为了维持与对等节点的连接，节点默认情况下每 30 分钟内会给对等节点至少发送一次信息。如果超过 90 分钟没有收到回复，节点会认为连接已经断开。</p><h3 id="数据分发与同步"><a href="#数据分发与同步" class="headerlink" title="数据分发与同步"></a>数据分发与同步</h3><h4 id="交易广播"><a href="#交易广播" class="headerlink" title="交易广播"></a>交易广播</h4><p>&emsp;&emsp;在比特币系统中，节点为了向比特币系统发送一笔交易，需要向邻近的对等全节点发送Inv消息（即Inventory消息，是比特币网络协议中的一种消息类型。当一个节点发现一个新的交易或区块时，它会将这个对象的哈希值包装在一个Inv消息中，然后将这个Inv消息广播给它的对等节点。这样，其他节点就知道了有一个新的交易或区块被发现。）。如果接收到对等节点返回的GetData消息，节点再使用Tx消息（即Transaction消息，也是比特币网络协议中的一种消息类型。当一个节点收到一个Inv消息并发现它还没有存储相关的交易或区块时，它会向发送Inv消息的节点发送一个GetData消息，请求完整的交易或区块数据。然后，发送Inv消息的节点会将完整的交易或区块数据包装在一个Tx消息中，发送给请求的节点。）向对等节点发送交易信息。对等节点接收到交易信息后，将以同样的方式向其它邻近节点转发交易信息。</p><p><img src="https://7up.pics/images/2024/01/09/10.png" alt=""></p><h5 id="交易池"><a href="#交易池" class="headerlink" title="交易池"></a>交易池</h5><p>&emsp;&emsp;比特币网络中每个节点都会维护一个未确认交易列表，称为“交易池”。节点使用交易池记录并跟踪等待被区块链系统确认的交易。例如，具有钱包功能的节点会使用交易池来记录那些已发送到网络但还未被确认的，只与该节点上的钱包相关的预支付交易信息。</p><p>&emsp;&emsp;某些节点还维护一个单独的“孤立交易池”。所谓“孤立交易”是指，如果<font color=red>一个交易的输入与某未知的交易有关</font>，如与缺失的父交易相关，该孤立交易就会被暂时存储在孤立交易池中直到父交易的信息到达。当一个交易被添加到交易池时，会同时检查孤立交易池，看是否有某个孤立交易引用了此交易的输出（子交易）。任何匹配的孤立交易会被进行验证。如果验证有效，它们会从孤立交易池中删除，并添加到交易池中。</p><h4 id="区块广播与同步"><a href="#区块广播与同步" class="headerlink" title="区块广播与同步"></a>区块广播与同步</h4><p>当节点挖出一个新的区块时，使用以下方式将其发送给其他区块<br><img src="https://7up.pics/images/2024/01/15/image.png" alt=""></p><ul><li>出块节点将区块信息广播给所有已知的全节点</li><li>节点A验证收到的区块信息</li><li>若节点A验证区块合法，则向节点A的临近节点广播Inv消息（此时Inv消息中并不包含区块具体信息，而是只包含节点A验证过的区块的区块头等相关信息）</li><li>节点B接收到节点A发送的Inv消息，若节点B确认从未收到过这个区块信息，则向节点A发送Getdata消息，要求得到交易记录，以及区块的具体信息</li><li>节点A收到Getdata消息后将具体的区块信息发送给节点B（这一系列的消息验证都是为了减少网络带宽消耗）</li><li>由于节点A已经验证区块信息，节点A在此区块后继续进行竞争计算。节点B验证区块信息后重复以上过程</li></ul><h3 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h3><p>TODO: 单开一篇</p><h2 id="比特币区块链系统共识层"><a href="#比特币区块链系统共识层" class="headerlink" title="比特币区块链系统共识层"></a>比特币区块链系统共识层</h2><p>&emsp;&emsp;在比特币系统中，采用了PoW(Proof of Work)工作量证明共识机制，比特币网络节点如果想生成一个新的区块并写入区块链，必须通过求解工作量证明难题来竞争分布式账本的记账权，在节点成功求解出难题后，会马上将新区块对全网进行广播，网络的其它节点收到广播后，会立刻对其进行验证。如果验证通过，则表明已经有节点已求解出难题，获得当前区块的记账权，网络节点就选择接受这个新区块，记录到节点本地的账本中，然后进行下一个区块的竞争计算。</p><p>&emsp;&emsp;比特币系统通过共识机制竞争计算生成新区块的过程，被称为“挖矿（Mine）”，因此比特币网络节点又被称为“矿工（Miner）”，后续如以太坊等其它区块链系统都延用了这种说法。</p><h3 id="比特币区块链系统PoW共识机制"><a href="#比特币区块链系统PoW共识机制" class="headerlink" title="比特币区块链系统PoW共识机制"></a>比特币区块链系统PoW共识机制</h3><p><img src="https://7up.pics/images/2024/01/15/imagebc2599f6ae2a933c.png" alt="PoW竞争计算流程图"></p><h3 id="比特币区块链系统PoW的特点"><a href="#比特币区块链系统PoW的特点" class="headerlink" title="比特币区块链系统PoW的特点"></a>比特币区块链系统PoW的特点</h3><p>比特币系统的PoW共识机制具有两大特点：</p><ul><li>比特币系统PoW共识机制采用的“难题”具有难以解答，但很容易验证答案的正确性的特点，同时求解难题的“难度”，即比特币网络节点平均解出一个难题所消耗时间，是可以通过调整难题中的部分参数来进行控制的，因此比特币系统可以很好地控制链增长的速度；</li><li>通过控制区块链的增长速度，保证了如果一个节点成功解出难题完成了新区块的创建，该区块能够以更快的速度在所有节点之间传播，并且得到其他节点的验证，再结合比特币系统所采取的“最长链有效”的评判机制，就能够在大多数（超过比特币网络51%算力）节点都是诚实的情况下，避免恶意节点对区块链的控制。</li></ul><h3 id="竞争出块冲突"><a href="#竞争出块冲突" class="headerlink" title="竞争出块冲突"></a>竞争出块冲突</h3><p>&emsp;&emsp;比特币系统的PoW共识机制在运行过程中，有可能出现两个或多个不同的节点不分先后求解出满足要求的哈希值结果，都认为自己获得了出块权，并向系统网络广播自己生成新区块，这将导致节点竞争出块冲突。<br><img src="https://7up.pics/images/2024/01/15/imagea812d173fce001b6.png" alt=""></p><h2 id="比特币区块链激励层"><a href="#比特币区块链激励层" class="headerlink" title="比特币区块链激励层"></a>比特币区块链激励层</h2><p>&emsp;&emsp;在比特币系统中，比特币网络约每10分钟生成一个不超过1MB大小的区块，用于记录这10分钟内发生的验证过的交易内容，并将区块串联到最长的链尾部，每个区块的成功提交者可以得到系统一定数量的比特币的奖励（该奖励将作为区块内的第一个CoinBase交易，并将在一定区块数后才能使用），以及用户附加到交易上的支付服务费用。因此，即使没有任何用户交易，比特币网络也可以自行产生合法的区块并生成奖励。每个区块的奖励最初是50个比特币，每隔21万个区块（约4年时间）自动减半，最终比特币总量稳定在2100万个(即使永远也不会到达这个值)。</p><p>比特币系统的激励机制主要包括以下要点：</p><ul><li>加密货币总量固定：比特币总量不超过 2100 万个。 </li><li>出块激励：每当有节点获得一个区块的记账权，比特币系统就会发行出新的比特币作为对节点的奖励。一个区块产生的比特币数量都会按几何级数递减，每产出 21 万个区块，获得奖励的比特币数量就会减少 50% 。截至2022年，每个区块的奖励已降低为6.25个比特币，是比特币系统上线时的八分之一。</li><li>交易激励：用户会在交易中包含交易费，作为处理交易的服务费支付给获得区块记账权的节点。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链技术概述</title>
    <link href="/2023/12/28/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/12/28/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="区块链技术概述"><a href="#区块链技术概述" class="headerlink" title="区块链技术概述"></a>区块链技术概述</h1><h2 id="什么是区块链？"><a href="#什么是区块链？" class="headerlink" title="什么是区块链？"></a>什么是区块链？</h2><ul><li>从字面意义理解，区块链是由多个记录数据的区块构成的链式数据结构。</li><li>从技术角度理解，区块链是基于P2P网络架构的一种分布式账本，以“块-链”式数据结构来存储和验证账本数据，由多方维护的分布式节点共识机制来生成无法篡改、无法抵赖的账本数据，使用密码学方法保证数据的传输和访问安全，可自动执行高级语言或脚本语言编写的智能合约来生成或查询账本数据。</li><li>从应用角度理解，区块链面向由陌生主体构成的开放网络环境的价值记录，价值创造和价值交换过程，提供多方集体维护的不可篡改、不可抵赖、可追溯、公开透明的分布式账本服务记账服务，大幅降低第三方信任服务成本和风险，提高服务效率，是一种新型的无中介陌生人信任服务应用支撑平台系统。</li></ul><h2 id="区块链出现的原因"><a href="#区块链出现的原因" class="headerlink" title="区块链出现的原因"></a>区块链出现的原因</h2><h3 id="传统信任服务模式的局限性"><a href="#传统信任服务模式的局限性" class="headerlink" title="传统信任服务模式的局限性"></a>传统信任服务模式的局限性</h3><h4 id="根据信任主体之间的关系，可把信任服务模式分为三类："><a href="#根据信任主体之间的关系，可把信任服务模式分为三类：" class="headerlink" title="根据信任主体之间的关系，可把信任服务模式分为三类："></a>根据信任主体之间的关系，可把信任服务模式分为三类：</h4><div class="table-container"><table><thead><tr><th style="text-align:center">信任服务模式</th><th style="text-align:center">信任主体关系</th><th style="text-align:center">是否依赖第三方</th><th style="text-align:center">信任依据</th></tr></thead><tbody><tr><td style="text-align:center">无中介熟人信任</td><td style="text-align:center">熟人</td><td style="text-align:center">否</td><td style="text-align:center">熟人</td></tr><tr><td style="text-align:center">第三方信任</td><td style="text-align:center">陌生人</td><td style="text-align:center">是</td><td style="text-align:center">第三方可信度</td></tr><tr><td style="text-align:center">无中介陌生人信任</td><td style="text-align:center">陌生人</td><td style="text-align:center">否</td><td style="text-align:center">软件算法与机器系统</td></tr></tbody></table></div><h4 id="无中介熟人信任的局限性："><a href="#无中介熟人信任的局限性：" class="headerlink" title="无中介熟人信任的局限性："></a>无中介熟人信任的局限性：</h4><ul><li>熟人信任需要信任主体之间维持有特定社会关系为基础  </li><li>信任的建立需要投入大量的时间、资源，甚至情感  </li><li>信任的范围十分局限，信任主体对象数量极其有限</li></ul><h4 id="第三方信任的局限性："><a href="#第三方信任的局限性：" class="headerlink" title="第三方信任的局限性："></a>第三方信任的局限性：</h4><ul><li>第三方信任的构建成本十分高昂  </li><li>第三方信任的信任风险广泛存在</li></ul><p><del>人性难以经受住考验，</del> 最好的办法或许是不让其受到考验。</p><h3 id="区块链信任解决的问题："><a href="#区块链信任解决的问题：" class="headerlink" title="区块链信任解决的问题："></a>区块链信任解决的问题：</h3><ul><li>去信任，陌生主体之间建立信任依赖公开透明的软件算法，使信任的建立相对容易的。</li><li>信任范围可以做到十分广泛。</li><li>去中心化，多方维护、验证，极大的增加了系统内部作恶的难渡。（51%攻击）</li><li>成本相较于中心化的第三方信任服务较低</li></ul><p>&emsp;&emsp;但相较传统的信任服务模式，区块链对使用者的要求是较高的。区块链因为交易一旦上链就无法更改的特性，代码即法律，没有中心化的干涉，每个人都对自己的行为负全部责任，这是区块链社区的共识。所以在进行交易前必须确保其是完全符合预期的，没有漏洞（即使这是极其困难的）。总而言之，目前为止区块链不论对于区块链使用者或是应用区块链的开发者，对于区块链技术的要求是相对高的。<br>&emsp;&emsp;由于区块链的匿名和不可更改的特性，不乏试图利用区块链及其应用的漏洞获利的人，行业内将其戏称为“科学家”。</p><h2 id="区块链的特点"><a href="#区块链的特点" class="headerlink" title="区块链的特点"></a>区块链的特点</h2><ul><li>去中心化/弱中心化<br>&emsp;&emsp;区块链不依赖的中心化或第三方管理机构及硬件设施，去除或弱化中心管理，通过P2P网络构建分布式的结构体系和开源协议，让所有的节点都参与数据的记录和验证，再通过分布式传播发送给各个节点，即使部分节点受到攻击或者发生故障，也不会影响整个分布式账本数据的一致性和完整性，各个节点实现了信息自我验证、传递和管理。<br>&emsp;&emsp;<font color=red>去/弱中心化是区块链最突出最本质的特点。</font></li><li>数据不可篡改<br>&emsp;&emsp;信息一旦经过验证并添加到区块链，就会被永久地存储起来，在系统任何节点上对数据的修改都是无效的，除非有人能同时控制超过半数以上的系统节点，但是区块链系统的节点是由多方公共维护的，要控制超过半数以上的节点，需要付出的代价可能远远大于篡改数据获得的收益，因此，区块链技术从根本上改变了中心化的信用创建方式，通过数学算法与博弈论原理而非中心化信用机构来低成本地建立信用，比特币、以太坊等系统已充分证明了区块链的这一特点。</li><li>数字价值唯一性<br>&emsp;&emsp;在信息世界中，最基本单元是比特（bit），数字比特序列是可复制，但是数字价值不能被复制，数字价值必须是唯一的，这本身就是矛盾的。在区块链技术出现之前，要让一个文件在全世界范围内是唯一的，需要花费巨大的代价。区块链采用共识机制和密码学方法，以很小的代价实现数字化表达唯一性，真正使数字价值变得唯一，可以模拟真实世界中的实物唯一性。</li><li>智能合约<br>&emsp;&emsp;区块链通过可编程的智能合约，让机器系统自动执行双方所达成的契约或一些无法预见的交易模式，排除了传统交易过程中人为单方不完全履约或毁约等干扰因素，从制度上确保合约的全面执行，防止任何一方的抵赖。区块链有助于推动价值传递过程进入智能化状态，实现数字经济发展的质的飞跃。</li><li>开放性<br>&emsp;&emsp;区块链技术基础是开源的，除了对交易各方的私有信息进行加密外，区块链数据对所有人公开，任何人都能通过公开的接口，对区块链数据进行查询，并能开发相关应用，整个系统的信息高度透明。</li><li><p>去信任<br>&emsp;&emsp;传统的互联网应用系统是通过可信任的中央服务器节点或者第三方信任平台（如微信）进行信息的匹配验证和信任积累。区块链基于自身去/弱中心化、数据不可篡改、数字价值唯一性等特性，系统所有节点都能在去信任的环境中自由安全地交换数据，交易各方不用通过公开身份的方式让对方对自己产生信任，让对“人”的信任改变为对机器系统与公开算法的信任，更有利于由陌生主体构成的开放网络环境中信用的积累。</p><h2 id="区块链的类型"><a href="#区块链的类型" class="headerlink" title="区块链的类型"></a>区块链的类型</h2><p>|类型|节点归属|准入原则|共识范围|数据公开范围|应用范围|代表技术系统|<br>|:——:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|<br>|私有链|单一主体|受控加入|单一主体节点|不公开|单一主体内部|/|<br>|公有链|任意陌生主体|自由加入|所有节点|完全公开|公众|比特币、以太坊|<br>|联盟链|联盟成员主体|联盟成员自由加入|联盟通道节点|联盟内部公开|公众/联盟范围内|超级账本(Hyperledger Fabric)|</p></li></ul><h2 id="区块链分叉"><a href="#区块链分叉" class="headerlink" title="区块链分叉"></a>区块链分叉</h2><p>区块链分叉是指由于某种原因，从区块链的某一个区块开始，后续的区块构成了两条子链。</p><h3 id="区块链分叉的原因"><a href="#区块链分叉的原因" class="headerlink" title="区块链分叉的原因"></a>区块链分叉的原因</h3><ul><li>区块链软件升级。<br>&emsp;&emsp;由于区块链系统节点众多且由不同的主体维护，当区块链软件升级时，不同的节点升级到最新版本不可能做到完全同步（甚至部分节点选择不更新系统）。区块链系统的节点被划分为两大阵营，旧节点拒绝验证新节点产生的区块，新、旧节点各自延续各自认为正确的链，区块链发生永久分歧（硬分叉），所以分成两条链。</li><li>区块链出块冲突<br>&emsp;&emsp;在竞争计算的过程中，若两个不同的节点同时（或几乎同时，信息的同步是需要时间的）求解出满足要求的哈希值结果，都生成一个新的区块并向网络广播，彼此先得到信息得节点追随不同的区块，继续进行竞争计算 ，导致出块冲突，使区块链发生临时分叉。由于区块链只承认最长链的机制，所以当两条分链中，先得出下一区块得将成为唯一合法的链，非最长链将被抛弃，其中的区块将成为孤块。<h3 id="区块链的硬分叉和软分叉"><a href="#区块链的硬分叉和软分叉" class="headerlink" title="区块链的硬分叉和软分叉"></a>区块链的硬分叉和软分叉</h3>&emsp;&emsp;区块链中的硬分叉与软分叉的区别在于：<br>&emsp;&emsp;协议更新后的节点是否向前兼容。<br>&emsp;&emsp;软分叉向前兼容，所有被更新节点认为合法的区块同样被未更新的节点认为是合法的。硬分叉则要求所有的不向前兼容，所有更新后的节点生成的区块被未更新的节点认为是不合法的<h2 id="区块链技术发展历史"><a href="#区块链技术发展历史" class="headerlink" title="区块链技术发展历史"></a>区块链技术发展历史</h2></li></ul><h3 id="区块链的发展历程"><a href="#区块链的发展历程" class="headerlink" title="区块链的发展历程"></a>区块链的发展历程</h3><p>&emsp;&emsp;业界普遍认为区块链技术已经经过三个阶段的演化：     </p><div class="table-container"><table><thead><tr><th style="text-align:center">阶段</th><th style="text-align:center">核心功能</th><th style="text-align:center">共识机制</th><th style="text-align:center">区块链类型</th><th style="text-align:center">性能</th><th style="text-align:center">实现语言</th></tr></thead><tbody><tr><td style="text-align:center">区块链1.0（比特币）</td><td style="text-align:center">加密货币</td><td style="text-align:center">PoW</td><td style="text-align:center">公有链</td><td style="text-align:center">低</td><td style="text-align:center">简单脚本语言</td></tr><tr><td style="text-align:center">区块链2.0（以太坊）</td><td style="text-align:center">智能合约</td><td style="text-align:center">PoW/PoS</td><td style="text-align:center">公有链</td><td style="text-align:center">一般</td><td style="text-align:center">专用语言（如以太坊使用solidity）</td></tr><tr><td style="text-align:center">区块链3.0(超级账本)</td><td style="text-align:center">数字价值交换应用平台</td><td style="text-align:center">PBFT/Raft等多种机制</td><td style="text-align:center">公有链/私有链/联盟链</td><td style="text-align:center">较高扩展性</td><td style="text-align:center">高级编程语言</td></tr></tbody></table></div><h4 id="区块链1-0——比特币区块链系统"><a href="#区块链1-0——比特币区块链系统" class="headerlink" title="区块链1.0——比特币区块链系统"></a>区块链1.0——比特币区块链系统</h4><p><a href="https://bitcoin.org/en/bitcoin-paper" title="【比特币:一种点对点电子现金系统】">比特币:一种点对点电子现金系统</a><br>&emsp;&emsp;区块链1.0阶段使以基于区块链技术的加密货币系统为代表，其中最有影响力、应用范围最广的使比特币系统。 </p><p>与法定货币相比，比特币具有如下特点：</p><ul><li>去中心化：意味着没有任何独立个体可以对网络中的交易进行破坏，任何交易请求都需要大多数参与者的共识；</li><li>匿名性：比特币网络中账户地址是匿名的，无法从交易信息关联到具体的个体，但这也意味着很难进行审计；</li><li>通胀预防：比特币的发行需要通过挖矿计算来进行，发行量每四年减半，总量上限为2100万枚，无法被超发。（这也代表着比特币的发行永远不会有尽头，算力消耗并不减少的情况下，挖取的奖励却在减少，这或许必然使比特币的价值一直上涨？另外，或许现实中资源的大量消耗或许也是让比特币系统、比特币价值保持稳定的一个因素。作者对金融的了解十分局限，以上只是一些个人的肤浅猜测）。</li></ul><p>比特币系统自2009年1月上线运行以来，经历的重要事件如下：   </p><ul><li><p>2009年1月3日18:15:05，中本聪在位于芬兰赫尔辛基（Helsinki）的一个小型服务器上挖出了第一批50个比特币，第一个区块被称为创世区块或初始区块（Genesis Block）。1月9日出现序号为1的区块与创世区块相连，这标志着区块链的诞生。</p></li><li><p>2010年5月21日，第一次比特币交易∶佛罗里达程序员Laszlo Hanyecz用1万BTC 购买了价值25美元的披萨优惠券。这是比特币的首个兑换汇率1: 0.0025美元。这些比特币在2021年3月价值已超过5亿美元。</p></li><li><p>2011年，开始出现基于显卡的挖矿设备。2011年年底，比特币价格约为2美元。</p></li><li><p>2012年6月，Coinbase公司成立，支持比特币相关交易，该公司目前已经发展为全球数字资产交易平台，同时支持包括比特币、以太币在内的一系列数字货币。</p></li><li><p>2012年9月27日，比特币基金创立，此时比特币价格为12.46美元。</p></li><li><p>2012年11月28日，比特币产量第一次减半。</p></li><li><p>2013年3月，超过30%的专业矿工已经采用专用ASIC矿机进行挖矿。</p></li><li>2013年10月，世界第一台可以兑换比特币的ATM在加拿大上线。</li><li>2013年11月29日，比特币的交易价格创下1242美元的历史新高，而同时黄金价格为一盎司1241.98美元，比特币价格首度超过黄金，开始被称为“数字黄金”。</li><li>2014年3月，中国第一台可以兑换比特币的ATM在香港上线。</li><li>2014年6月，美国加州通过AB-129法案，允许比特币等数字货币在加州进行流通。</li><li>2015年6月，纽约成为美国第一个正式进行数字货币监管的州。</li><li>2015年10月，欧盟法院裁定比特币交易免征增值税。</li><li>2016年7月9日，比特币产量第二次减半。</li><li>2017年7月，比特币网络全网算力首次突破6 exahash/s（每秒6×1018次哈希计算）。</li><li>2020年5月13日，比特币产量第三次减半。</li><li>2020年7月26日，比特币价格达到10000美元。</li><li>2021年2月9日，比特币价格达到50000美元。</li></ul><h4 id="区块链2-0——以太坊区块链系统"><a href="#区块链2-0——以太坊区块链系统" class="headerlink" title="区块链2.0——以太坊区块链系统"></a>区块链2.0——以太坊区块链系统</h4><p>&emsp;&emsp;以太坊在比特币的基础上引入智能合约机制（比特币的UTXO模型中的脚本，可以看作是一种简单的智能合约），将区块链技术带向了更广阔的应用领域，使更多基于区块链的去中心化应用场景得以实现。</p><p>&emsp;&emsp;与比特币系统相比，以太坊的区块链平台具备以下的主要技术特点：</p><ul><li>支持图灵完备的智能合约应用（比特币采用的交易脚本开发语言是非图灵完备），设计了编程语言Solidity和虚拟机 EVM；</li><li>哈希计算选用了同时需要计算性能和内存容量的哈希函数（比特币的哈希计算只一来依赖算力）；</li><li>引入叔块（Uncle Block）激励机制，缩短了区块产生间隔到15秒左右，提升了交易处理性能（比特币需要10分钟左右）（以太坊出块速度快，更容易产生孤块，引入叔块同时有利于公平性）；</li><li>引入账户系统和世界状态，更容易支持复杂的业务逻辑（比特币采用UTXO模型，没有账户的概念）；</li><li>引入燃料（Gas）机制限制智能合约代码执行指令数，即在以太坊平台运行应用要支付成本，有效避免循环执行攻击（比特币系统对每个网络节点发出交易的行为没有任何限制）；</li><li>最初仍然采用PoW工作量证明共识机制，2022年9月15日PoS信标链与 PoW以太坊完成合并，以太坊从此支持效率更高的权益证明（Proof of Stake，PoS）共识机制。<br><img src="https://pic2.zhimg.com/80/v2-20ee2a20e8746d86cf55c981258bd4d9_1440w.webp" alt=""></li></ul><p>以太坊系统自2015年7月上线运行以来，经历的重要事件如下：</p><ul><li><p>2015年7月30日，以太坊第一阶段Frontier（前沿）正式发布，标志着以太坊区块链网络的正式上线。以太坊Frontier阶段采用类似比特币的PoW共识机制，参与节点以矿工挖矿形式维护网络，支持上传智能合约。</p></li><li><p>2016年3月14日，以太坊进行了第二次分叉，正式发布第二阶段 Homestead（家园）稳定版本，主要改善了安全性，区块数超过1150000，同时开始提供图形界面的客户端，提升了易用性。</p></li><li><p>2016 年6月，以太坊上的一个去中心化自治组织 DAO 受到漏洞攻击，造成价值超过5000万美元的以太币被移动到攻击者控制的“伪DAO”。为解决该问题，2016年7月20日，以太坊进行第三次硬分叉，作出一个向后不兼容的改变，让所有的以太币（包括被移动的）回归原处，而不接受此改变的区块链则成为经典以太坊（Ethereum Classic,ETC）。这导致了以太坊的分裂，Ethereum (ETH)被支持使用分叉的人使用，而Ethereum Classic(ETC)被继续使用旧区块链的人使用。</p></li><li><p>2017年3月1日， 企业以太坊联盟（Enterprise Ethereum Alliance，EEA）宣布成立，其称旨在创建一个企业级区块链解决方案，共同开发产业标准。</p></li><li><p>2017年10月16日，以太坊网络第4370000个区块诞生时通过“拜占庭”代码执行一次硬分叉，发布第三阶段Metropolis（大都会）。“大都会”阶段被视作提升以太坊平台整体可用性的重要基石，它主要的特性就是为平滑引入PoW和PoS的混合链模式建立基础。大都会升级分成了三次分叉，2017年10月的“拜占庭”、2019年2月的“君士坦丁堡”和“圣彼德堡”、以及2019年12月的“伊斯坦堡”。</p></li><li><p>2020年12月1日以太坊的Layer2信标链正式上线，并于2021年成功完成柏林跟伦敦硬分叉，EIP1559协议升级后，透过销毁手续费和降低区块奖励的方式控制总发行量。而当Layer1原本的这条公链，跟信标链Layer2新公链完成合并后，以太坊就正式进入2.0（宁静）阶段。</p></li></ul><h4 id="区块链3-0——超级账本"><a href="#区块链3-0——超级账本" class="headerlink" title="区块链3.0——超级账本"></a>区块链3.0——超级账本</h4><p> &emsp;&emsp;区块链3.0阶段的标志就是区块链技术开始向社会经济各个领域应用延申，人们逐渐意识到，区块链不仅是一种技术，更是一种代表公正透明、协作信任的模式，区块链思想与技术可以有效应用在政企管理、社会治理、供应链、物联网、权属管理、医疗健康等诸多领域，成为面向社会全行业的应用。</p><h2 id="区块链的总体架构"><a href="#区块链的总体架构" class="headerlink" title="区块链的总体架构"></a>区块链的总体架构</h2><h3 id="区块链系统体系结构"><a href="#区块链系统体系结构" class="headerlink" title="区块链系统体系结构"></a>区块链系统体系结构</h3><p>&emsp;&emsp;区块链作为一种分布式计算软件系统，在体系结构上没有采用传统具有中心化服务器节点的C/S或B/S架构，而是采用无中心化节点的P2P体系结构。在区块链系统中，每个存储区块链与账本数据的网络节点都是对等关系，节点之间会共享区块链与账本数据，无论新区块从哪个节点生成，都会通过特定的P2P网络协议以广播的形式向其它节点进行传播，所有节点对区块进行验证后，新区块才能被添加到链上。</p><h3 id="区块链系统的逻辑架构"><a href="#区块链系统的逻辑架构" class="headerlink" title="区块链系统的逻辑架构"></a>区块链系统的逻辑架构</h3><p><img src="https://p.sda1.dev/14/482d1bdee4a4150d1a7149c1a4082ff6/image.png" alt="区块链系统的逻辑架构"></p><h2 id="区块链方式思维"><a href="#区块链方式思维" class="headerlink" title="区块链方式思维"></a>区块链方式思维</h2><ul><li>去/弱/多中心化   <pre><code class="hljs"> &amp;emsp;&amp;emsp;去中心化是研究应用区块链技术首先要建立的一种思维方式。开展一项涉及信任构建的工作，首先要思考，如果使用去中心化怎样来解决？不仅高价值数据资产及其相关计算能去中心化，普通Web数据访问存储也可以去/弱/多中心化。通过去/弱/多中心化思考，可能会获得中心化信任体系下难以获取的诸多新特性、新能力。   </code></pre></li><li>透明开放   <pre><code class="hljs"> &amp;emsp;&amp;emsp;研究应用区块链技术，在所属的共识范围内，需要机制、规则、代码的完全透明、开放，透明、开放是让共识群体积极参与的前提和基础；黑箱运行、潜藏规则或独有专利，在区块链中难以获得更大范围的共识，并难以被更多参与者所拥护。   </code></pre></li><li>协同合作   <pre><code class="hljs"> &amp;emsp;&amp;emsp;不要试图一个人或一个机构独自完成所有工作和享有所有回报，要习惯人与人之间、团队与团队之间的协同合作，共定游戏规则，共建生态，共同发展产业，共获回报。</code></pre></li></ul><h2 id="区块链面临的挑战"><a href="#区块链面临的挑战" class="headerlink" title="区块链面临的挑战"></a>区块链面临的挑战</h2><h3 id="技术上的挑战"><a href="#技术上的挑战" class="headerlink" title="技术上的挑战"></a>技术上的挑战</h3><ul><li>不可能三角<br>区块链三元悖论是指普遍持有的观点，即在去中心化、安全性和可扩展性方面，去中心化网络在任何给定时间只能提供三个好处中的两个。<br><img src="https://7up.pics/images/2023/12/31/6195f2425c7422bc6.png" alt=""></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>水龙吟·登建康赏心亭</title>
    <link href="/2023/12/26/%E6%B0%B4%E9%BE%99%E5%90%9F%C2%B7%E7%99%BB%E5%BB%BA%E5%BA%B7%E8%B5%8F%E5%BF%83%E4%BA%AD/"/>
    <url>/2023/12/26/%E6%B0%B4%E9%BE%99%E5%90%9F%C2%B7%E7%99%BB%E5%BB%BA%E5%BA%B7%E8%B5%8F%E5%BF%83%E4%BA%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="水龙吟·登建康赏心亭"><a href="#水龙吟·登建康赏心亭" class="headerlink" title="水龙吟·登建康赏心亭"></a>水龙吟·登建康赏心亭</h1><h2 id="辛弃疾·宋代"><a href="#辛弃疾·宋代" class="headerlink" title="辛弃疾·宋代"></a>辛弃疾·宋代</h2><h2 id="gt-楚天千里清秋，水随天去秋无际。遥岑远目，献愁供恨，玉簪螺髻。落日楼头，断鸿声里，江南游子。把吴钩看了，栏杆拍遍，无人会，登临意。"><a href="#gt-楚天千里清秋，水随天去秋无际。遥岑远目，献愁供恨，玉簪螺髻。落日楼头，断鸿声里，江南游子。把吴钩看了，栏杆拍遍，无人会，登临意。" class="headerlink" title="&gt; 楚天千里清秋，水随天去秋无际。遥岑远目，献愁供恨，玉簪螺髻。落日楼头，断鸿声里，江南游子。把吴钩看了，栏杆拍遍，无人会，登临意。  "></a>&gt; 楚天千里清秋，水随天去秋无际。遥岑远目，献愁供恨，玉簪螺髻。落日楼头，断鸿声里，江南游子。把吴钩看了，栏杆拍遍，无人会，登临意。  </h2><h2 id="gt-休说鲈鱼堪脍，尽西风，季鹰归未？求田问舍，怕应羞见，刘郎才气。可惜流年，忧愁风雨，树犹如此！倩何人唤取，红巾翠袖，揾英雄泪？"><a href="#gt-休说鲈鱼堪脍，尽西风，季鹰归未？求田问舍，怕应羞见，刘郎才气。可惜流年，忧愁风雨，树犹如此！倩何人唤取，红巾翠袖，揾英雄泪？" class="headerlink" title="&gt;休说鲈鱼堪脍，尽西风，季鹰归未？求田问舍，怕应羞见，刘郎才气。可惜流年，忧愁风雨，树犹如此！倩何人唤取，红巾翠袖，揾英雄泪？"></a>&gt;休说鲈鱼堪脍，尽西风，季鹰归未？求田问舍，怕应羞见，刘郎才气。可惜流年，忧愁风雨，树犹如此！倩何人唤取，红巾翠袖，揾英雄泪？</h2><hr><p><img src="https://imgsa.baidu.com/baike/pic/item/b03533fa828ba61e5ce953544e34970a304e5942.jpg" alt="辛弃疾" title="辛弃疾像"><br><a href="https://hanyu.baidu.com/shici/detail?from=aladdin&amp;pid=828381072ae34f9aaf0f62173c743b4a" title="【百度百科:《水龙吟·登建康赏心亭》·辛弃疾】">百度百科:《水龙吟·登建康赏心亭》·辛弃疾</a><br><a href="https://www.bilibili.com/video/BV1nT411V7Qj/?share_source=copy_web&amp;vd_source=5eb7dd2183f6f6a92616e71bcb39116c" title="【【骆玉明公开课】9.11 辛弃疾《水龙吟·登建康赏心亭》｜古典诗词鉴赏】">【骆玉明公开课】辛弃疾《水龙吟·登建康赏心亭》</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>祭鳄鱼文</title>
    <link href="/2023/12/25/%E7%A5%AD%E9%B3%84%E9%B1%BC%E6%96%87/"/>
    <url>/2023/12/25/%E7%A5%AD%E9%B3%84%E9%B1%BC%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="祭鳄鱼文"><a href="#祭鳄鱼文" class="headerlink" title="祭鳄鱼文"></a>祭鳄鱼文</h1><h2 id="韩愈·唐代"><a href="#韩愈·唐代" class="headerlink" title="韩愈·唐代"></a>韩愈·唐代</h2><blockquote><p>维年月日，潮州刺史韩愈使军事衙推秦济，以羊一、猪一，投恶溪之潭水，以与鳄鱼食，而告之曰：<br>昔先王既有天下，列山泽，罔绳擉刃，以除虫蛇恶物为民害者，驱而出之四海之外。及后王德薄，不能远有，则江汉之间，尚皆弃之以与蛮、夷、楚、越；况潮岭海之间，去京师万里哉！鳄鱼之涵淹卵育于此，亦固其所。今天子嗣唐位，神圣慈武，四海之外，六合之内，皆抚而有之；况禹迹所揜，扬州之近地，刺史、县令之所治，出贡赋以供天地宗庙百神之祀之壤者哉？鳄鱼其不可与刺史杂处此土也。<br>刺史受天子命，守此土，治此民，而鳄鱼睅然不安溪潭，据处食民畜、熊、豕、鹿、獐，以肥其身，以种其子孙；与刺史亢拒，争为长雄；刺史虽驽弱，亦安肯为鳄鱼低首下心，伈伈睍睍，为民吏羞，以偷活于此邪！且承天子命以来为吏，固其势不得不与鳄鱼辨。  </p><h2 id="鳄鱼有知，其听刺史言：潮之州，大海在其南，鲸、鹏之大，虾、蟹之细，无不归容，以生以食，鳄鱼朝发而夕至也。今与鳄鱼约：尽三日，其率丑类南徙于海，以避天子之命吏；三日不能，至五日；五日不能，至七日；七日不能，是终不肯徙也。是不有刺史、听从其言也；不然，则是鳄鱼冥顽不灵，刺史虽有言，不闻不知也。夫傲天子之命吏，不听其言，不徙以避之，与冥顽不灵而为民物害者，皆可杀。刺史则选材技吏民，操强弓毒矢，以与鳄鱼从事，必尽杀乃止。其无悔！"><a href="#鳄鱼有知，其听刺史言：潮之州，大海在其南，鲸、鹏之大，虾、蟹之细，无不归容，以生以食，鳄鱼朝发而夕至也。今与鳄鱼约：尽三日，其率丑类南徙于海，以避天子之命吏；三日不能，至五日；五日不能，至七日；七日不能，是终不肯徙也。是不有刺史、听从其言也；不然，则是鳄鱼冥顽不灵，刺史虽有言，不闻不知也。夫傲天子之命吏，不听其言，不徙以避之，与冥顽不灵而为民物害者，皆可杀。刺史则选材技吏民，操强弓毒矢，以与鳄鱼从事，必尽杀乃止。其无悔！" class="headerlink" title="鳄鱼有知，其听刺史言：潮之州，大海在其南，鲸、鹏之大，虾、蟹之细，无不归容，以生以食，鳄鱼朝发而夕至也。今与鳄鱼约：尽三日，其率丑类南徙于海，以避天子之命吏；三日不能，至五日；五日不能，至七日；七日不能，是终不肯徙也。是不有刺史、听从其言也；不然，则是鳄鱼冥顽不灵，刺史虽有言，不闻不知也。夫傲天子之命吏，不听其言，不徙以避之，与冥顽不灵而为民物害者，皆可杀。刺史则选材技吏民，操强弓毒矢，以与鳄鱼从事，必尽杀乃止。其无悔！"></a>鳄鱼有知，其听刺史言：潮之州，大海在其南，鲸、鹏之大，虾、蟹之细，无不归容，以生以食，鳄鱼朝发而夕至也。今与鳄鱼约：尽三日，其率丑类南徙于海，以避天子之命吏；三日不能，至五日；五日不能，至七日；七日不能，是终不肯徙也。是不有刺史、听从其言也；不然，则是鳄鱼冥顽不灵，刺史虽有言，不闻不知也。夫傲天子之命吏，不听其言，不徙以避之，与冥顽不灵而为民物害者，皆可杀。刺史则选材技吏民，操强弓毒矢，以与鳄鱼从事，必尽杀乃止。其无悔！</h2><p><img src="https://img0.baidu.com/it/u=3797457948,3378691364&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPG?w=486&amp;h=1108" alt="韩愈" title="韩愈像"><br><a href="https://hanyu.baidu.com/shici/detail?from=aladdin&amp;pid=75e6d6adcba94a27bea2243472f19e27" title="百度汉语">百度汉语：《祭鳄鱼文》·韩愈</a><br><a href="https://www.bilibili.com/video/BV13V411S7nW/?share_source=copy_web&amp;vd_source=5eb7dd2183f6f6a92616e71bcb39116c" title="【有山朗读：《祭鳄鱼文》】">【有山朗读：《祭鳄鱼文》】 </a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛神赋·曹植</title>
    <link href="/2023/12/24/%E6%B4%9B%E7%A5%9E%E8%B5%8B%C2%B7%E6%9B%B9%E6%A4%8D/"/>
    <url>/2023/12/24/%E6%B4%9B%E7%A5%9E%E8%B5%8B%C2%B7%E6%9B%B9%E6%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="洛神赋"><a href="#洛神赋" class="headerlink" title="洛神赋"></a>洛神赋</h1><h2 id="曹植"><a href="#曹植" class="headerlink" title="曹植"></a>曹植</h2><p>黄初三年，余朝京师，还济洛川。古人有言：斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其辞曰：<br>余从京域，言归东藩，背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。<br>于是精移神骇，忽焉思散。俯则未察，仰以殊观。睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯，若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王之所见也，无乃是乎！其状若何？臣愿闻之。”<br>余告之曰：其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘飖兮若流风之回雪。远而望之，皎若太阳升朝霞29；迫而察之，灼若芙蕖出渌波。秾纤得中，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜。明眸善睐，靥辅承权。瓌姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。<br>于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。攘皓腕于神浒兮，采湍濑之玄芝。余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达，解玉佩而要之。嗟佳人之信修，羌习礼而明诗。抗琼珶以和予兮，指潜川而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。<br>于是洛灵感焉，徙倚彷徨。神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒途之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。<br>尔乃众灵杂沓，命俦啸侣。或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹，咏牵牛之独处。扬轻袿之猗靡，翳修袖以延伫。体迅飞凫，飘忽若神。凌波微步，罗袜生尘。动无常则，若危若安；进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。<br>于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉銮以偕逝。六龙俨其齐首，载云车之容裔。鲸鲵踊而夹毂，水禽翔而为卫。于是越北沚，过南冈，纡素领，回清扬。动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮，哀一逝而异乡。无微情以效爱兮，献江南之明珰。虽潜处于太阴，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。<br>于是背下陵高，足往心留。遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘反，思绵绵而增慕。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。<br><img src="https://img1.baidu.com/it/u=47290751,1236951627&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=375&amp;h=500" alt="洛神赋"><br><a href="https://baike.baidu.com/item/%E6%B4%9B%E7%A5%9E%E8%B5%8B/5572?fr=ge_ala" title="百度百科：洛神赋·曹植">百度百科：《洛神赋》·曹植</a><br><a href="https://www.bilibili.com/video/BV1HN4y1N7w5/?share_source=copy_web&amp;vd_source=5eb7dd2183f6f6a92616e71bcb39116c" title="【中文系小伙走火入魔，在洛河里背诵《洛神赋》】 ">有山朗读：《洛神赋》</a><br><a href="https://www.bilibili.com/video/BV1mT411w7Qe/?share_source=copy_web&amp;vd_source=5eb7dd2183f6f6a92616e71bcb39116c" title="【【戴建业】只听过“飘飖兮若流风之回雪”？《洛神赋》到底讲了什么？】 ">【戴建业】洛神赋赏析</a></p>]]></content>
    
    
    <categories>
      
      <category>古诗文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诗篇46的秘密</title>
    <link href="/2023/12/23/%E8%AF%97%E7%AF%8746%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <url>/2023/12/23/%E8%AF%97%E7%AF%8746%E7%9A%84%E7%A7%98%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Secret-of-Psalm-46-2002"><a href="#The-Secret-of-Psalm-46-2002" class="headerlink" title="The Secret of Psalm 46 (2002)"></a>The Secret of Psalm 46 (2002)</h1><h2 id="Brian-Moriarty"><a href="#Brian-Moriarty" class="headerlink" title="Brian Moriarty"></a>Brian Moriarty</h2><p>你们之中，有多少人亲眼看过日全食？有朝一日能站在月球的阴影之下，是我人生的一个夙愿。我离日食最近的一次也超过三十年了。</p><p>那是79 年的二月二十六日，日食直接经过了波特兰上空。我买好了汽车票，并且找好了住处，但是最后，公司没准我假。当然，任何一个波特兰人都知道，在二月看到太阳的机会非常渺茫。而且可以肯定的是，那一天，波特兰城天空被阴云笼罩，就算我赶到了也只能望天兴叹。</p><p>那个让我错过日食的工作，是我大学毕业后的第一份工作：在马萨诸塞州美丽的伍斯特城的Radio Shack老店，做柜台销售。我去那家店报道的当天，一辆货车便停在了店门口，它送来一个大纸板箱，上面印着传奇般的名字 TRS-80——这，是我们的店面样品，是世界上第一台量产销售的微型计算机，TRS-80 Model one，搭载了 1.7 兆赫兹的 Z80 CPU，有4,096 字节的内存，以及 64 个字符的黑白文字显示屏。唯一的存储设备是磁带录入器。而这一切只需要仅仅 599 美元的低价。<br><img src="https://img2.baidu.com/it/u=3287134677,555855062&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500" alt="日食"></p><p>我工作的这家店此前有过辉煌的时代，曾几何时，它在一个繁华的商业街里靠近核心的地段。但是，和许多新英格兰的城市一样，七十年代初大型购物中心的兴起，将这片商业区挤兑成了鬼城。面对这个局面，伍斯特的应对方式很坚决：显然，那些城市的规划者们认为，如果不能战胜购物中心，那就加入他们。于是，市中心的好几个商业街区被夷为平地，几十个家族老店，就此成为回忆，这其中也包括我的曾祖父曾经掌柜的药房。而就在这些回忆的旧址，一座有电影院和美食城的三层商业综合体矗立了起来。</p><p>当一系列的城市建设尘埃落定之后，伍斯特只有那么几个孤零零的老商街还在硬挺着，而我所在的 Radio Shack就躲在其中一个里面。雪上加霜的是，Radio Shack在购物中心里开了一个新店，离我那家店只有一百多米。所以，顾客们现在面临着一个选择，是去干净、明亮、有穿制服的保安和充足停车位的购物中心？还是去成人影院旁边破烂写字楼的阴暗角落？于是，我就有许多的时间，来把玩这些新来的电脑。我自学了 BASIC 语言，然后又掌握了 Z80 汇编，有了这两样技能，我就可以编写游戏了。当然我也制作了一些自动运行的演示动画，它们整晚整晚地在店铺橱窗中刷屏，只不过观众，只有一些在店门廊里撒尿的酒疯子。</p><p>奇怪的是，即使店里把这些全新的计算机内存升级到16K，对它感兴趣的客户还是寥寥无几。而实际上那些按下门铃，穿过前门的顾客们，并不是来买什么东西的，他们来这儿只是为了参加一项免费的促销活动。这个活动在四十多年里，是 Radio Shack 员工们的噩梦：每月电池俱乐部，促销的点子很简单：</p><p>我们给顾客发一张小红卡片，上面印着代表月份的方格，每年十二次，那些“幸运”的售货员可以在方格里印上标记，然后给顾客送上一枚，崭新的 7号、5号、2号、1号电池 或 9 V方电池。</p><p>当然，顾客是不能选择电池种类的，在我任职的那会儿，Radio Shack 提供三种电池：第一种是碱性电池，强力、持久而且昂贵，像金色闪光包装的处方药一样挂在柜台里，通过“每月电池”俱乐部，这些是最不可能获得的类型；然后就是高级的铅蓄电池，稳定、可靠、价格适中，摆放在靠近店铺前端的显眼位置，通过每月电池俱乐部，这些电池也不太可能获得；而最后一种“压桶底的货”，是标准的铅蓄电池，我们真的就像字面意思那样把它放在桶里，而且狡猾地摆在店铺的紧里面，一个靠近电视天线的阴暗角落里，有谁还记得电视天线这样东西？</p><p>当顾客们到店，来拿他们的免费“每月电池”的时候，必须先穿过整座店铺，略过收音机、立体声耳机，以及遥控赛车之类的产品，然而什么产品都不能让他们驻足停留。每月1日，这些客户就像上好了发条一般，走进店，挥舞着小红卡片，而我需要从我的编程中回过神来，挥手招呼他们到店铺的最深处。电池只值 29 美分？没有关系，大多数电池已经跑电？也没关系，他们来了，他们拿了电池，然后，如果我没记错的话，没有任何顾客买了任何产品。</p><p>我真是个差劲的销售。那时的我年轻气盛又愚昧无知。</p><p>我以为我要靠舞弄键盘来完成游戏设计学业，这让我差点错过破门而入的人生一课。</p><p>幸运的是，我并非是在微型计算机上摆弄游戏的唯一的人，整个美国，像我一样的人都在开疆拓土。当时，史考特·亚当斯正在编写世界上第一款，上市发售的冒险游戏，还记得那些冒险游戏吗？我后来的东家，Infocom也在这时成立，一同成立的都是史诗般的名字，On-Line Systems、Sirius、Personal Software 、SSI ，那是个大时代，小屁孩一夜暴富，游戏很好做，也价格亲民，那个天地开阔的时代像一局新开的俄罗斯方块。</p><p>然而，1979 年的所谓游戏业中，最大的事件与电脑没有半毛钱关系——在秋分时节的9 月 20 日的早上，一本新的儿童读物在英国各大书店悄然上架。</p><p>这本图画书非常与众不同，它里面画着 15 幅饱含细节的彩色绘画，讲的是一只向月亮送珠宝的兔子的奇幻故事。书的封底，是一张彩色照片，上面是一枚奔跑兔子型的珠宝，这个兔子有1.5米长，由18 k金制作，满身都挂着饰品、铃铛，还镶嵌着蓝色石英做的太阳月亮。根据下面的注释，这枚珠宝埋藏在英格兰的某地，而揭示埋藏地点的线索，隐含在书中的图画和字里行间。宝藏将归第一个找到的人所有。<br><img src="https://img14.360buyimg.com/pop/jfs/t25450/123/2579669444/65169/f431b064/5be9e096N06fe7494.jpg" alt="假面舞会"><br>这本书的名字是《Masquerade（假面舞会）》。由一位眼光独到、拥有恶作剧天分的鬼才小个子作家所著，他的名字叫基特·威廉姆斯。</p><p>没过几天，这本书的首印本便被席卷一空，而后，整个日不落帝国，都陷入了兔子狂热之中。兴奋的读者们用直尺、圆规和量角器，对图画进行了一顿测量，杂志文章、电视专题节目，则对线索进行仔细分析，提出各种假设，这让狂热的人互相带起了节奏。一座名不见经传的公园，只因为外号叫做 Rabbit Hill（兔子山），不幸被误导而来的寻宝者们挖成了筛子。以至于当局必须树立标牌，向公众公示，我们确认这里没有金兔子。</p><p>一些寻宝者最后甚至需要以心理咨询来了却对此的痴迷。</p><p>这一狂潮甚至跨越了大洋，它侵袭到了美国、法国、意大利和德国。</p><p>短短数月时间，这本书便销售了一百万册，在《哈利波特》系列诞生在之前，假面舞会一直保持着童书之王的纪录。</p><p>尽管这个谜题事实上只能在英国解出，这本书还是售出了 15 万册译本，其中 8 万册还是日语。</p><p>“假面舞会”珠宝只值几千美元，但此刻它的价值已无足轻重。许多搜寻者在他们数月的探索和旅行中，所花的钱财早已远超珠宝的价值，他们追寻的是刺激，是成为唯一的可能。寻宝、埋梗和隐藏物品，似乎组成一种不可阻挡的吸引力。找寻它们的过程很有趣，也可成为口中的谈资。电脑游戏在最初的时代便开始对这种人类心理不断索取。找到隐藏的惊喜，这种表达我们叫它“彩蛋”。</p><p>在《电子游戏Electronic Games》杂志的创刊号上，雅达利的 史蒂文.赖特创造了这个名词，商业电脑游戏中的第一个彩蛋，出现在雅达利 2600 的一张早期卡带中。名字很简单，叫做《冒险Adventure》。<br><img src="https://img2.baidu.com/it/u=4250277693,3010749342&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=292" alt="雅达利2600"></p><p>通过一系列不寻常的动作和隐晦的操作，玩家可以发现一个隐藏的房间，闪烁着“Created by Warren Robinet（由 沃伦 罗宾奈特 创作）”字样。在数十年间，彩蛋，和它的邪恶的孪生兄弟，作弊码，成为了行业之中的行业。</p><p>现在，整本的杂志和整座的网站都致力于发现和传播它们，它们是我们工具箱中的标准配置，它们是最基本的词汇，它们就是电脑游戏设计的语言。</p><p>电脑游戏玩家可能是第一批，用“彩蛋”来形容隐藏惊喜的幸运儿。但是我们绝对不是首先使用它们的人。</p><p>画家、作曲家和各行各业的艺术家，在自己的作品中隐藏内容是流传几个世纪的传统艺能：</p><p>新发明的录像机和VCD机有暂停的功能，暴露出了几十个隐藏的迪斯尼作品里的“情色”内容；</p><p>托马斯·金凯德，自称“光之画家”， 在自己的作品中留下“爱的纸条”，将字母“N”藏于画作中,作为送给妻子的礼物。在他签名旁的数字表示，在每幅画中藏了多少个 N 字母；</p><p>毕加索、达利、拉斐尔、普桑和多位其他画家，在他们的画作中都藏有各种各样的内容，他们最喜欢变的魔术是在人群中，混进自己、家人、朋友和其他艺术家的肖像；</p><p>埃尔·格列柯喜欢狗，但天主教会禁止他在神圣的绘画中包含犬类，于是，他把它们藏了起来，通常藏在云朵的轮廓里；</p><p>作曲家迪米特里·肖斯塔科维奇的作品发表在苏联文化部政治审查之下，而他的交响乐和室内乐作品充满了各种隐藏的符号和推翻一切的暗示，审查机构一旦认定，他势必会被流放到西伯利亚；</p><p>莫扎特的歌剧《魔笛》充满了古老的秘密结社共济会的仪式典故，莫扎特本人和他的导师海顿都是共济会的成员。<br><img src="https://5b0988e595225.cdn.sohucs.com/q_70,c_zoom,w_640/images/20180830/da3ae273068646a8abf1de98036605fa.jpeg" alt="巴赫"><br>但最为知名的彩蛋供应商是晚期巴洛克之王，终极音乐好学生——约翰·塞巴斯蒂安·巴赫。巴赫曾是希伯来字母代码学Gematria的学生，这是一种数字与字母对应的艺术：A=1、B=2、C=3，诸如此类。通过比较、排列或其他方式操作这些数值，信息便得以隐藏。巴赫对于希伯来字母代码 14 和 41 情有独钟，14 是他名字首字母的总和：B=2、A=1、C=3、H=8，而 41 是他的姓名缩写 J S BACH 的总和，这两个数字在巴赫的作品中比比皆是，最广为人知的例子是他的赞美诗，“Vor deinen Thron”。乐谱的第一行恰好包含 14 个音符，而整个旋律从头到尾包含 41 个。</p><p>谜语卡农是巴赫另一个最喜欢的游戏，卡农是一种顺向弹奏听起来很顺耳，但略微有不同步感的旋律。法国童谣《两只老虎》和英文儿歌《划船歌》，便是简单的二声部卡农。但卡农可以使用无数个声部，而且你并不需要用同样的方式来弹奏每个声部。你可以改变八度音阶、变调弹奏，调转音高、反向弹奏，甚至同时使用两个以上的变化。寻找好听的多声部卡农旋律，是一门庞杂的艺术。而巴赫，则是这一领域无可争议的大师。在谜语卡农中，作曲家确定出基本旋律和声部数量，但是不管各声部之间的关系，而学生们必须自己找出每个声部的位置和音高，以及是否需要调转音高和反向弹奏。</p><p>巴赫谱写了许多谜语卡农，其中最著名的 G大调卡农BWV 1076，背后是一部迷人的故事。巴赫的一位学生是洛伦兹·米兹勒，他是“音乐科学通信协会”的创始人，这个邀请制的精英组织，全心致力于毕达哥拉斯哲学的研究，以及音乐和数学的统一。它的成员名单如同德国作曲名家列表一般：你可以看到亨德尔、泰勒曼，乃至莫扎特……申请加入学会的申请人，需要付上本人的油画肖像，以及一部原创音乐的样本。出于好学生的高效率，第14名学会成员决定，用一件作品来满足这两个要求。他找到德累斯顿法院的官方画师，伊利亚斯·豪斯曼为他绘制一幅肖像。这幅肖像，现在就悬挂在莱比锡的市政厅画廊中，它是巴赫现存的唯一没有争议的画像。豪斯曼的画像中，巴赫穿着一件正装外套，显然，它恰好有“14”颗纽扣，他手持着一份乐谱，乐谱上是一曲有着六个并进声部的谜语卡农，1974 年发现的一份手稿证实，这曲卡农正是以著名的哥德堡变奏曲为基调撰写的 14 首卡农中的，第 13 首。</p><p>似乎这些音乐体操并没有让巴赫满足，他喜欢在自己的作曲中，通过用音符对应字母来隐藏信息。他的姓氏 B-A-C-H 在德国文字谱中，对应音高序列降 B、A、C 和 B本位。这一主题在巴赫的最后作品，在他死后于 1750 年发表的《赋格的艺术（The Art of Fugue）》中，表现最为令人难忘，“fugue（赋格）”一词来自拉丁语，fuga，意为飞跑，也就是逃跑。所以，Art of Fugue 是飞行的艺术。是一种围绕主题，然后带着他飞的艺术。巴赫谱写了数百首赋格，但都比不上这系列的14首。该系列最后一首是复杂的赋格曲，曲子第一部分和第二部分正常进行，紧接着是 B-A-C-H 签名，然后突然，没有任何预兆，也没有任何作曲结构的合理性，赋格就这么戛然而止了。巴赫育有 20 个孩子，他的儿子卡尔·菲利普·伊曼纽尔，宣称巴赫在写下这最后几个音符后就逝去了。这个故事或许不足为信。</p><p>巴赫音乐中的彩蛋是令人愉悦的水中明月，研究巴洛克音乐的教授和学生们都对其如数家珍。但在 2002 年三月，这个演讲第一次发表时，这些彩蛋变成了整个古典音乐界的话题。当月的古典音乐榜单上，一张叫做《巴赫：死亡》Morimur的ECM唱片登上冠军宝座。它由 希利亚合唱团和一位才华横溢，却鲜为人知的小提琴家克里斯多夫·波彭合作演出。Morimur 中的音乐基于巴赫的D小调帕蒂塔集组曲，通过希伯来字母代码数字学分析，转而改谱为合唱与小提琴独奏。在德国教授赫尔佳.托恩进行的这项分析中将数字与音符的时长、小节数和帕蒂塔集的德国文字符实现对应，如此一来，她便宣称发现了隐藏在音符中的，数个礼拜仪式文本全文，这张 CD 便呈现了这些隐藏的文字。与原始的音乐叠加之后，结果极度忧伤、阴暗可怖，并且非常流行。相当多的音乐评论家对这张音乐作出了抨击，他们对托恩教授的分析结果并不买账，认为它是数字命理学和营销推手的成果。</p><p>他们的小心并非不无道理，数字命理学是一个光滑的斜坡，即便是正常心智的人会陷入此中无法自拔。这里我要分享一个发生在我身上的轶事。早在九十年代，互联网腾飞之前，最流行的BBS叫，“Prodigy”，我在 Prodigy 上购买了一个帐号，这样，我就能加入同好的兴趣圈，与全国各地的伙伴闲聊。</p><p>有一天，一个陌生人出现在我们的讨论版中。当时，我就知道麻烦来了。</p><p>这个人叫加里 ，他开始散播各式各样的末世言论，全球的阴谋啦、秘密结社啦、恶魔崇拜啦。一开始，我们还能礼貌地应对，我们向他询问信息来源，勘正他的错误，从逻辑上反驳他的言论，尝试着以文明的举止来对待。</p><p>但是，我们的回应并没有让他平静下来，反而变本加厉，他的阴谋论警告变得更加咄咄逼人，近乎歇斯底里。他开始威胁与他有不同见解的人，用现在的说法来讲，他已经“使用咆哮体”了。但他最为夸张的警告，并非关于同性恋、犹太人、洛克菲勒家族或光照派，而是加里宣称，人类最大的敌人是圣诞老人 (Santa Claus)。据他所说，他有一个秘密的数学公式，确切地“证明”了圣诞老人，是反基督者的化身。出于好奇，我们要求加里透露他的公式，结果，我们正中他的下怀——果然，他有本书要卖。而我是其中一棵韭菜。</p><p>我给他寄去了十五美元，没过一周，书寄到了。封面中，一张华盛顿纪念碑的不详照片上方，横着带有装饰纹理的书名《666：最后的警告》，在这本私印的 494 页巨作中，加里透露了一个简单的希伯来字母代码公式：他宣称这个公式由古苏美尔人创建，这个公式将 6 的倍数们对应给每个字母：A=6、B=12、C=18，以此类推。想想我当时的惊慌失措吧：我将这个古老公式用在名字“圣诞老人 (Santa Claus)”上，然后得出了总和，渎神的数字666，圣经上代表野兽的数字！我登陆 Prodigy，向我们兴趣圈中的成员们汇报这一结果，毕竟，加里是对的，毫无疑问，根据古苏美尔文明无懈可击的智慧，圣诞老人是反基督的。</p><p>然后，我继续演算了好几个名字，根据加里的公式，这些名字都能得出 666 的和，例如“Saint James”圣詹姆斯、“New York”纽约和“New Mexico”新墨西哥洲，很快，讨论版便充满了各种发现，例如“computer”电脑、“Boston tea”波士顿茶，以及最为罪孽深重的“sing karaoke”K歌……而在此之后，加里弃我们而去。我的 15 美元物有所值。</p><p>然而，加里并不是第一个将神秘代码与圣经联系起来的人，数百年来，人们一直钻研圣经里面的彩蛋：希伯来人的卡巴拉不传之秘，基本上就是为对旧约前五经，也就是摩西五经的希伯来字母代码的沉思冥想。而计算机的横空出世，使圣经的数字命理学应用，变得快速而高效。最新的圣经搜索活动，是由前华尔街日报记者迈克尔·卓思宁，在 1998 年发表的一本书掀起的。他的书《圣经密码The Bible Code》通过跳字密码，也即用文章中的每第n个字符组成新的信息，对旧约中的希伯来文本进行翻译和揭秘。卓思宁宣称发现了二战、大屠杀、广岛原子弹、伊扎克·拉宾和肯尼迪的暗杀、登月、水门事件、俄克拉荷马大爆炸、比尔·克林顿当选总统、戴安娜王妃的逝世、以及木星被彗星撞击……等等的预言，他也找到了其他一些预言：洛杉矶大地震、小行星撞击地球、核子末日……这一切预言都将在，十年之前一个一个发生。</p><p>《圣经密码》在畅销书榜上霸榜数周，并衍生出数个续集，和众多山寨作品。</p><p>《圣经》的确吸引了一帮怪人。但是对于硬核的彩蛋猎手们，任何事都不能与追寻究极文学迷思相媲美。</p><p>有那么一个绝世难题摆在他们面前，它吐着毒液，耗费着钱财，阻断了前途，将聪明、健康的学者，推到疯狂的边缘：是谁写了莎士比亚的作品？</p><p>有关莎士比亚作品的著作权问题的文章和书籍，足以填满一个大型图书馆。而事实上，确实几家图书馆专门用来存放他们，不要说一小时的讲演，即便是一天课时的大学课程都无法串讲这个复杂、玄妙又极度诱人故事。</p><p>尽管如此，我想为没有接触过莎士比亚迷思的听众，尝试用短暂篇幅概述一二：</p><p>莎士比亚生平中确凿的事实，在一张西餐布的背面就够写了。</p><p>我们知道，一个叫做威廉·莎士比亚的男性，于 1564 年在斯特拉特福村庄一代出生。</p><p>我们知道，他有一名妻子和至少三个孩子。</p><p>我们知道，他在斯特拉特福买了房产，和他的邻居打了几场官司，并且最终死于 1616 年，享年 52 岁。</p><p>我们还知道，就在同时代，一个也姓莎士比亚但拼法略有不同的男子，在伦敦的舞台上担任演员，最终成为了一些剧院的合伙人。</p><p>我们还知道，就在同时代，许多极为优秀的诗歌和戏剧，在伦敦以莎士比亚的名义发表。</p><p>而我们不知道的是，斯特拉特福的业主，和伦敦的演员，是不是同一个人？</p><p>我们不知道的是，这个人，是不是创作了那些诗歌和戏剧？</p><p>我们只知道，那些诗歌和戏剧，经过四百年的洗礼，已尊为西方文明皇冠上的明珠。</p><p>归于莎士比亚名下的作品，似乎是由一位通晓世间万物的人所写，作品中充满了神话、古典文学、运动、战争、武器、航船、法律、宫廷礼仪、政治、园艺学，音乐、天文、医学、驯鹰术、以及理所当然的，戏剧。</p><p>那么，问题来了，在一个文盲遍地的乡村，一位的农民的儿子，一个在历史中不值一提的人，是如何成为人类的百科全书，如何让自己卓群的智慧、口才和见解穿越了时代到达今天的？</p><p>在最初的 150 年间，没人对这位大师的生平有所怀疑。然后，在十八世纪末，居住在斯特拉特福北几公里远的著名学者，詹姆斯·威尔莫特牧师，决定为这位著名剧作家撰写传记。他相信，莎士比亚尽管并未在遗嘱中提及书籍或手稿，但像他这样受过良好教育的人定有着一座非常广博的图书馆。多年的思索使他推论出这些书一定隐含在当地的收藏当中。于是这位出色的牧师学者踏遍英国乡村，盘点了斯特塔特福方圆80公里的每座一书架，并没有发现哪怕一本出自威廉·莎士比亚的藏书，甚至没有找到和莎士比亚相关的信件。更而甚之，在莎士比亚的作品中，完全没有出现过斯特拉特福当地的民俗、土话或方言。</p><p>在四年痛苦的研究之后，威尔莫牧师沮丧地作出结论，与斯特拉特福的莎士比亚同一时代，展现的出广博教育和绝美文笔、足撰写出惊诧世人诗歌和戏剧的人，只有一位，他便是多语言作家、哲学家、政治家，科学方法论的发明者、伊丽莎白女王和詹姆斯国王的财政大臣，— 弗朗西斯·培根爵士。</p><p>威尔莫从不敢公开他的理论，但在他逝世之前，他将这个秘密理论透露给了好友詹姆斯·考威尔。后者于1805 年在伊普斯维奇哲学学会的会议中披露这一理论，学会成员理所当然地愤怒了，而这骇人听闻的事件很快就被遗忘。</p><p>直到 1857 年，来自斯塔拉特福，这次是美国康州斯特拉特福的一位女士，她发表了一本书，书名为《莎士比亚戏剧哲学解读The Philosophy of the Plays of Shakespeare Unfolded》。作者是和弗朗西斯·培根并没有亲戚关系的迪莉娅·培根女士，在这本书中声称莎士比亚的作品是由英国贵族的秘密集团联合创作，其成员包括沃尔特·雷利爵士、菲利普·西德尼爵士，以及弗朗西斯·培根爵士。</p><p>迪莉娅·培根的书，重新点燃了寂如死灰的文学世界。</p><p>也点燃了正统斯特拉特福党和异端培根党之间的战火。</p><p>仅仅为了对证据辩论，雨后春笋般的文学团体和学术期刊从石头缝里蹦了出来，雪片般的宣传画册、报刊专栏和短文争抢地跳出来站队，他们开始用夸张的脏水互泼，并且，大量有着终身学者职位的学术大师也难逃这场瘟疫。</p><p>迪莉娅·培根带着她写的那本核弹使用说明，千里迢迢从美国的斯特拉特福来到了英国的斯特拉特福。然后，令所有人不可相信的事发生了，她获得了打开莎士比亚坟墓的官方许可。</p><p>天并不遂人愿，就在她准备翘起石头的那一刻，迪莉娅的自我怀疑导致了灾难性的精神崩溃，不久之后，她于一家疯人院中身无分文地惨死了。</p><p>到了1888 年前后，事态已发展得无法收场。美国明尼苏达州的众议院议员伊格内修斯·唐纳利，对莎士比亚的争议产生了兴趣。一天，他在阅读 1623 年的《第一对开本First Folio》的副本时，他注意到，在《历史》一卷的第 53 页上出现了“培根”这个词，在《喜剧》一卷的第 53 页上也有。他还注意到弗朗西斯·培根爵士在密码学方面著作斐然。于是，唐纳利开始对行数和页码进行统计，增减字符，在句子下划线，圈出一些单词并将它们删去，生成了一个复杂而费解的算法。他声称，这是由培根所发明，用来在《第一对开本》中隐藏秘密信息的方法。</p><p>西方文明上的第二次彩蛋大搜索就此拉开帷幕。</p><p>下面聊几个蠢的出奇的例子。底特律一位名叫奥威尔·欧文的博士，建造了一座奇异的研究工具，他称之为“命运卷轴”。这件工具由两个巨大的木质线轴组成，轴上包着0.6米宽、300米长的帆布长带，他把培根、莎士比亚、马洛、格林、波尔和斯宾塞的作品拆成散页，与伯顿所著的《忧郁的解剖》一起，粘在这条帆布上。通过来回转轴，欧文博士可以快速浏览多个页面用以搜寻线索和交叉引用，他雇佣了一大帮秘书和速记员，最终宣称挖出了，伊丽莎白时期的秘史，和几部从未问世的莎士比亚戏剧与十四行诗。下面就是给予欧文博士灵感，让他建造他的“命运之轮”，可能是由伟大的诗人本人亲笔写下的隐藏诗句： “举尔之刀，斩吾之卷。辗转辗转，覆叶轮磐。瞥目为金，撵轮旋旋。盲仙踏球，球滚而天地不歇。”</p><p>在发表了五本这样的垃圾文字之后，欧文宣布自己发现了一个大秘密：培根的一份手稿埋藏在怀伊河上的切普斯托城堡附近。在接下来的十五年间，欧文花费了几千美元，雇佣船员对河床进行爆破。</p><p>然后，他死于了自己的一无所获。</p><p>一个名为阿伦斯博格的人，分析了培根母亲墓中可疑裂缝的意义，据此写了一整本书。</p><p>最终，理智之光于 1957 年出现。对于熟悉密码学的人，威廉·弗里德曼的权威性无需赘述，在二战时期，弗里德曼上校在美国陆军担任通信情报处通信研究室主任。他以破解了大日本帝国顶级军事机密而闻名于世。战后，上校决定将自己的专业在莎士比亚密码上发扬光大。他访谈了领域里的顶尖专家，准备了详尽的科学分析，并将其以《莎士比亚密码考The Shakespeare Ciphers Examined》为标题发表。<br><img src="https://www.kfzimg.com/G00/M00/0E/76/ooYBAFSM7uyADHVbAANe0PqbG5Q317_b.jpg" alt="The Shakespeare Ciphers Examined"><br>他的结果是？一言以蔽之：一派胡言。</p><p>根据密码学的标准，莎士比亚作品中的隐藏信息没有一个是可信的。</p><p>用于从文字中提取信息所使用的规则全部都不严谨，过分主观，且这些密码除了原始的解密者之外，任何人都不能够重复使用。</p><p>这个迷局里的人们可能并不是想骗别人，他们或许让先入为主的想法骗了自己，他们被自己所编织妄想迷宫困住，从混沌中挖掘秩序。</p><p>你是不是认为弗里德曼的残忍无情曝光，能一劳永逸地让异教徒们永久沉寂下去？怎么可能。</p><p>书籍、电视专题、网站、学术会议和博士论文依然在涌现，且笔耕不辍。</p><p>我必须指出，莎士比亚的著作权争议，并不仅仅是妄人的妄念。有许多备受尊敬的作家和莎士比亚崇拜者，也都严肃地怀疑过莎剧的真正来源。这里包括霍桑、爱默生，惠特曼、亨利·詹姆斯、马克·吐温、弗洛伊德、奥逊·威尔斯和约翰·吉尔古德爵士。还在世的怀疑者们包括新环球剧场的艺术总监马克·里朗斯；迈克尔·约克、德里克·雅克比、肯尼斯·布拉纳、以及最受尊敬和博学的当代莎剧演员，基努·里维斯。</p><p>目前，最可能是真莎士比亚的候选人成了爱德华·德维尔，牛津第十七位伯爵。这个理论最早在 1920 年由一位叫J. 托马斯·鲁尼的英国校长所提出。</p><p>究竟是什么启发了众路神仙对巴赫、圣经和莎士比亚的作品展开了如此严密的探究？没人会在乔叟或济慈的作品中寻找藏头诗，也没有出现一张引起轰动的瓦格纳或贝多芬曲谱解码合唱版CD。为了明白这一切，我们需要看清圣经和莎士比亚在西方文脉流传的长长的涓流中，是怎样的两条船。</p><p>如果我们将这个地球的英文字符、短语、句子和文章都摆在一起，那么其中没有任何一件文学作品、甚至任何一段文字，比 1611版在詹姆斯一世主持发表的《圣经》对现代英语世界影响更大。詹姆斯王的圣经向世人翻译，什么叫做经典。</p><p>人们认为他是英语散文中最高贵丰碑的尖顶，英语语言中的集大成者。它为几代诗人、剧作家、音乐家、政治家和演说家注入灵感。无数无数的人，都通过朗读他们家中唯一的书籍圣经，而学会了阅读。它的音韵和意像，从文法上哺育、成就了美英的宪法和法律。</p><p>但是，即使是这本由46位编者历经十载编写的詹姆斯王《圣经》，在“埃文河的天鹅——斯特拉特福的璀璨遗产面前也黯然失色。对莎士比亚词汇量的统计，几种方法评估下来最少的那个是 15,000个单词，这是詹姆斯王《圣经》的三倍，是第二名，约翰·米尔顿的两倍。他的诗歌和戏剧，均在没有字典或词典的情况下完成，因为，那时，我们根本不知道什么叫做字典。这一切都在他的脑子里，当莎士比亚的思想无法用伊丽莎白时代的英语表述时，他便创造新词。牛津英语词典列出了数百个由这位大师首创的日常词语和短语， Addiction上瘾， Alligator鳄鱼， Assasination刺杀， Bedroom卧室， Critic批评， Dawn黎明， Design设计， Dialogue对话， Employer雇主， Film电影，Glow发光 ，Gloomy沮丧，Gossip，八卦，Hurry快点，Investment投资，Lonely寂寞，Luggage行李，Manager经理，Switch任天堂的破烂游戏机，Torture，折磨，Transcendence超越，Wormhole虫洞，Zany喜感</p><p>光《哈姆雷特》一部作品，就有近 40 个新词。</p><p>再看看今天，谁能如此肆意妄为的发明气魄？这方面只有一位英语作家达到了莎士比亚的水准：弗朗西斯·培根爵士。到了现代，这类纪录的持有者是查尔斯·道奇森，他的笔名更为人所熟知，刘易斯·卡罗尔。有趣地是，他是英语文学中引用次数第二的作家，仅次于莎士比亚。</p><p>我们都被詹姆斯王《圣经》和莎士比亚的作品深深影响，无论我们喜欢不喜欢，我们都通过这些伟大的作品窥视这个世界。它们是现代英语思想的主要来源，是我们思维的规矩。这些炫目的智慧和修辞的珠宝，光是看一眼，就会引起一种非凡的感受，这是一种罕见的、强烈的珍贵情感，它完全能够颠覆你的生命。这种情感，强烈到能让人抛妻弃子，放弃事业名誉，无视万贯家财，而最终抛下一切，追寻本心。</p><p>这种奇幻和惧怕形成的甜美融合，这种难以摆脱的吸引力和麻痹灵魂的恐惧，我们叫做敬畏。</p><p>敬畏是艺术成就的圣杯。没有哪一种人类情感能有这样粗犷的转化力量。也没有哪一种情感比敬畏更难。真正难的是人类创造出的敬畏之作。</p><p>是敬畏，令犹太学者，尽其一生从摩西五经中解读上帝；</p><p>是敬畏，令每年数百万游客，去拜访吉萨金字塔、瓜达卢普、麦加；</p><p>是敬畏，令可怜的迪莉娅·培根落入万劫不复之境……</p><p>现在，请不要离开这次演讲的主题，不要以为，埋两个彩蛋就是设计出令人敬畏的游戏的关键！一般的游戏，人为地置入彩蛋和作弊码，就像是“每月电池”俱乐部一般，你需要长途跋涉，来到店铺最里面，获得你此行的真正目的——如果人们真的想要超能力，那么为什么不直接给他们呢？</p><p>我们的想象力真的有那么不值钱，需要凭借营销点子，才能让玩家对我们的游戏感兴趣吗？</p><p>令人敬畏的事物不需要隐藏，令人敬畏的事物既富有又出手大方。</p><p>宝藏就在那里。</p><p>一天下午，我就在那家Radio Shack老店的柜台后面，孤零零地坐着，我的老板因为某些原因出门了。一位老太太从前门走进来，和我们的大多数顾客一样，衣衫破旧，她大概得依靠养老金来过活，我以为她是来拿免费电池的。然而，一台小收音机放在了柜台上，这台收音机，来自那个比谁的晶体管更多的年代，它完全被脏兮兮的绷带包了起来。老太太看向我，问道：“你能修好它吗？”我慢慢地拆开绷带，一层一层地把它们揭下，直到收音机的后盖掉下来，一团红色的烟尘飘起……收音机的内部已经被电池漏液侵蚀一半了。</p><p>我看着收音机，我看着老太太，我又回头看着收音机。我转过身，昂贵的碱性电池像处方药一样悬挂在那里，从金色的包装中，我拆出一枚闪闪发光的 9 伏电池，然后从包装盒中取出一台崭新的晶体管收音机，把电池装了进去。再然后，我又帮它找到她最爱的电台，没有钱币易手，她一句话没说，离开了商店。</p><p>令人敬畏的事情，就像这样。<br><img src="https://img2.baidu.com/it/u=430421684,593463969&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=832" alt="巴赫手稿"><br>就敬畏的来源。巴赫，给他的学生们讲了些非常具体的见解，除了 B-A-C-H 之外，在巴赫的音乐中，还有两组缩写。这些缩写并没有隐藏在音符中，取而代之的是，它们就列在手稿的顶部，让全世界的人都能看到，这两组缩写是 SDG 和 JJ。SDG 是拉丁文短语 上帝独一无二的荣光，，JJ 则是 救救我，耶稣，。巴赫以 “以永恒的样式”，写就了所有杰作，他不只是为讨好赞助商而作曲，也不为赢得听众的赞许，他的工作就是他的信仰。</p><p>巴赫曾经写道，“音乐除了颂扬上帝荣光，以及休养灵魂之外，不该有其它目的。不把这一点记在心中，那么就没有真正的音乐，只有地狱的咆哮和吵闹”。</p><p>使你感动的名字无关紧要，重要的是，你为它而感动。</p><p>敬畏是宗教的基础，其他任何动机，都无法将你从个人成就的桎梏中解脱出来，</p><p>其它任何情感都不会教给你飞行的艺术。</p><p>电脑游戏只有区区四十年的历史，</p><p>在我们的基本词汇中，关于游戏的词汇寥寥无几，</p><p>整本的词典等待着去填写。天地广阔，像是一局新开的俄罗斯方块。</p><p>不久之后，甚至就在我们的有生之年，会有那么一个游戏设计，如同闪电一般照耀我们的文化。它极易辨识，它有着泉涌般慷慨，有着肆意妄为的发明气魄。学者们毕其一生，甚至数个世纪来对它探索和痴迷。</p><p>它会是美妙的，它会是令人战栗的，它，令人充满敬畏。</p><p>数年前，我受邀在伦敦的一个峰会演讲，这次旅行我带着我的妻子，之后我们找了个休息日去观光。我们的目的地是英国的第二大旅游胜地，埃文河上的斯塔拉特福（笑）。火车到站之时，天气很冷，下着雨，幸运的是，大部分景点都距火车站只有步行的距离，我们访问了莎士比亚的诞生地。尽管这个地方还有争议，但她是一处迷人的老房子。她矗立在大道边，每年还是吸引着上百万的朝圣者，甚至于居住附近的人们。</p><p>我们经过了莎士比亚学习读写的学校，尽管也没有文献能证明。我们也去了莎翁夫人安妮·海瑟薇的小屋，她在这个淳朴的乡村农场度过了童年，尽管，也没有记录可以证实叫这个名字的人在这里居住过。最后，我们来到了一个毋庸置疑与莎士比亚有关的地方：埃文河畔的圣三一教堂，名为“莎士比亚”的男性于此长眠。去到这座美丽的教堂，需要经过一条树荫遮蔽、两旁古老墓碑鳞次栉比的长长步道。这里的入口出奇的小，在教堂内部不允许拍摄，里面黑暗又宁静，除了几车厢运来的游人，这里的氛围倒称得上恭敬肃穆。有一些人坐在长椅上，沉浸在祈祷之中，一道走廊直通教堂中心，祭台的左侧照得明亮，墙上悬挂着诗人的半身像，鹅毛笔在手，宁静地凝视着汹涌的朝圣者。地面上花束环绕着的，就是迪莉娅·培根发疯的地方，威廉·莎士比亚的墓碑上刻着可怕的警告：看在耶稣的份上，好朋友，切勿挖掘这黄土下的灵柩;让我安息者将得到上帝的祝福，迁我尸骨者定遭亡灵诅咒。</p><p>每年，来自地球各个角落的三百万名朝拜者，都会来到这座石碑前方，对这位堪称伟大之人的样貌评头论足。而相比之下，祭台右侧阴暗而毫无特征，这边埋葬的都不是什么名人。唯一值得一提的，是一个设计简单，深色橡木做的雕花木箱。在箱子里面，在厚厚的玻璃后面，是一本翻开的大书，箱体上的铭文可以告诉你，这本书，是詹姆斯王《圣经》第一版，于 1611 年出版。时年，莎士比亚 46 岁。</p><p>没有多少朝拜者会来观看祭台的这一侧，大部分人都只是匆匆一瞥，阅读铭牌然后走开。少数更富有观察力的人会注意到，《圣经》打开在“旧约：圣咏集”的第 46 章，为什么偏偏翻开这一页，没有解释。对于既成事实，都不重要。</p><p>如果你不好奇，如果你对英国的历史和文学不感冒，如果你还想保持内心的平静，那就捂住耳朵吧——在 1900 年，一位学者注意到了，詹姆斯王版圣咏集第 46 章，有些可怕，有些奇妙。</p><p>这一篇章的正数第 46 个字是“shake”，这一篇章的倒数第 46 个字是“spear”。</p><p>这有两种可能性：</p><p>这是世界文学史上，最为巧合的巧合，亦或者，根本不是巧合。</p><p>地球围绕着唯一的太阳旋转，且拥有唯一的月亮。月亮的直径是太阳的 1/400，我们到太阳的距离恰好是到月亮的 400 倍。而且，日月的轨道，恰好使他们每个月相交两次，这意味着，月亮有时会精确地盖住太阳的圆盘，并且恰好可以在美妙而可怕的几分钟内完全遮蔽。</p><p>这不也是个完美的巧合吗？</p><p>在 1977 年 6 月，一位眼光独到、拥有恶作剧天分的鬼才小个子作家，，登上了英国阿帕斯尔村的一座山顶，这里矗立着一座高高的纤细十字架，这是对亨利八世的第一任妻子“阿拉贡凯萨琳”的纪念。</p><p>太阳高悬在南面，将十字架投影在长满野草的山坡，在恰好中午 12 点，这个男人从口袋里拿出一块磁铁。他转动磁铁，使磁铁的北极朝向正南，然后将它埋在了十字架的阴影下。</p><p>两年之后，在他的第一本书出版前的几个小时里，这个男人有回到了山坡。这次是在午夜时分，他用指南针找到了自己埋藏的磁铁。就在同一个位置，他在地面上挖了一个洞，并在里面放进了一个陶瓷容器，容器上铭刻着：</p><h2 id="“我就是假面舞会珠宝的守护者，我在等你，亦或是永恒。”"><a href="#“我就是假面舞会珠宝的守护者，我在等你，亦或是永恒。”" class="headerlink" title="“我就是假面舞会珠宝的守护者，我在等你，亦或是永恒。”   "></a>“我就是假面舞会珠宝的守护者，我在等你，亦或是永恒。”   </h2><p><a href="https://www.bilibili.com/video/BV1VK4y1s7bq/?share_source=copy_web&amp;vd_source=5eb7dd2183f6f6a92616e71bcb39116c" title="【一款硬核解密游戏，一个“疯子”的第九艺术朝圣之路】">【一款硬核解密游戏，一个“疯子”的第九艺术朝圣之路】 </a><br><a href="https://zhuanlan.zhihu.com/p/121816366">诗篇46的秘密【重译版】</a></p>]]></content>
    
    
    <categories>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>久别离</title>
    <link href="/2023/12/23/%E4%B9%85%E5%88%AB%E7%A6%BB/"/>
    <url>/2023/12/23/%E4%B9%85%E5%88%AB%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="久别离"><a href="#久别离" class="headerlink" title="久别离"></a>久别离</h1><h2 id="李白·唐代"><a href="#李白·唐代" class="headerlink" title="李白·唐代"></a>李白·唐代</h2><blockquote><p>别来几春未还家，玉窗五见樱桃花。<br>况有锦字书，开缄使人嗟。<br>至此肠断彼心绝，云鬟绿鬓罢梳结，愁如回飚乱白雪。<br>去年寄书报阳台，今年寄书重相摧。<br>东风兮东风，为我吹行云使西来。  </p><h2 id="待来竟不来，落花寂寂委青苔。"><a href="#待来竟不来，落花寂寂委青苔。" class="headerlink" title="待来竟不来，落花寂寂委青苔。"></a>待来竟不来，落花寂寂委青苔。</h2><p><img src="https://img2.baidu.com/it/u=3388735149,1868921231&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=930&amp;h=538" alt="李白" title="李白"><br><a href="https://baike.baidu.com/item/%E4%B9%85%E5%88%AB%E7%A6%BB/3316252?fr=ge_ala" title="久别离">百度百科：《久别离》·李白</a><br><a href="https://www.bilibili.com/video/BV1ev4y1P7CH/?share_source=copy_web" title="【【骆玉明公开课】5.3 李白《久别离》｜古典诗词鉴赏】 ">骆玉明公开课《久别离》|古典诗词鉴赏</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摸鱼儿·更能消几番风雨</title>
    <link href="/2023/12/22/%E6%91%B8%E9%B1%BC%E5%84%BF%C2%B7%E6%9B%B4%E8%83%BD%E6%B6%88%E5%87%A0%E7%95%AA%E9%A3%8E%E9%9B%A8/"/>
    <url>/2023/12/22/%E6%91%B8%E9%B1%BC%E5%84%BF%C2%B7%E6%9B%B4%E8%83%BD%E6%B6%88%E5%87%A0%E7%95%AA%E9%A3%8E%E9%9B%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="摸鱼儿·更能消几番风雨"><a href="#摸鱼儿·更能消几番风雨" class="headerlink" title="摸鱼儿·更能消几番风雨"></a>摸鱼儿·更能消几番风雨</h1><h2 id="宋代·辛弃疾"><a href="#宋代·辛弃疾" class="headerlink" title="宋代·辛弃疾"></a>宋代·辛弃疾</h2><blockquote><p>更能消、几番风雨，匆匆春又归去。惜春长怕花开早，何况落红无数。春且住，见说道、天涯芳草无归处。怨春不语。算只有殷勤，画檐蛛网，尽日惹飞絮。   </p><h2 id="长门事，准拟佳期又误。蛾眉曾有人妒。千金纵买相如赋，脉脉此情谁诉？君莫舞，君不见、玉环飞燕皆尘土！闲愁最苦！休去倚栏，斜阳正在，烟柳断肠处。"><a href="#长门事，准拟佳期又误。蛾眉曾有人妒。千金纵买相如赋，脉脉此情谁诉？君莫舞，君不见、玉环飞燕皆尘土！闲愁最苦！休去倚栏，斜阳正在，烟柳断肠处。" class="headerlink" title="长门事，准拟佳期又误。蛾眉曾有人妒。千金纵买相如赋，脉脉此情谁诉？君莫舞，君不见、玉环飞燕皆尘土！闲愁最苦！休去倚栏，斜阳正在，烟柳断肠处。"></a>长门事，准拟佳期又误。蛾眉曾有人妒。千金纵买相如赋，脉脉此情谁诉？君莫舞，君不见、玉环飞燕皆尘土！闲愁最苦！休去倚栏，斜阳正在，烟柳断肠处。</h2><p><img src="https://so1.360tres.com/t01e20a6d6a34a63bd0.jpg" alt="辛弃疾" title="辛弃疾"><br><a href="https://baike.baidu.com/item/%E6%91%B8%E9%B1%BC%E5%84%BF%C2%B7%E6%9B%B4%E8%83%BD%E6%B6%88%E5%87%A0%E7%95%AA%E9%A3%8E%E9%9B%A8/6752174?fr=ge_ala">百度百科：《摸鱼儿·更能消几番风雨》</a><br><a href="https://www.bilibili.com/video/BV1kk4y1v7TY/?share_source=copy_web&amp;vd_source=5eb7dd2183f6f6a92616e71bcb39116c" title="【“首都市民音乐厅”之女高音独唱《摸鱼儿•更能消几番风雨》，辛弃疾 词，演唱：高瑞璇，中央歌剧院（首图20230407）】 ">女高音独唱《摸鱼儿·更消几番风雨》</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/12/22/test/"/>
    <url>/2023/12/22/test/</url>
    
    <content type="html"><![CDATA[<p>It is a test, wish you have fun!</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
